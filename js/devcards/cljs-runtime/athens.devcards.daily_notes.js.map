{"version":3,"sources":["athens/devcards/daily_notes.cljs"],"mappings":"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","names":["athens.devcards.daily-notes/US-format","tick.alpha.api.formatter.cljs$core$IFn$_invoke$arity$1","athens.devcards.daily-notes/title-format","athens.devcards.daily-notes/date-string","ts","js/Date","x","tick.alpha.api.instant.cljs$core$IFn$_invoke$arity$1","tick.alpha.api.date_time.cljs$core$IFn$_invoke$arity$1","tick.alpha.api.format.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","var_args","G__58187","athens.devcards.daily-notes/get-day","js/Error","athens.devcards.daily_notes.get_day.cljs$core$IFn$_invoke$arity$1","offset","day","tick.alpha.api._.cljs$core$IFn$_invoke$arity$variadic","tick.alpha.api.date_time.cljs$core$IFn$_invoke$arity$0","tick.alpha.api/new-duration","athens.devcards.daily-notes/scroll-daily-notes","e","cljs.core/deref","daily-notes","G__58188","re-frame.core/subscribe","main-content","js/document","client-height","scroll-top","ratio","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.daily-notes/percent","G__58189","re-frame.core/dispatch","cljs.core/count","athens.devcards.daily-notes/db-scroll-daily-notes","goog.functions/debounce","athens.devcards.daily-notes/daily-notes-panel","note-refs","G__58190","cljs.core/empty?","G__58191","athens.devcards.daily_notes.get_day.cljs$core$IFn$_invoke$arity$0","notes","G__58192","G__58193","G__58194","posh.reagent/pull-many","athens.db/dsdb","cljs.core.map.cljs$core$IFn$_invoke$arity$2","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__58197","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__58199","cljs.core/chunk-buffer","i__58198","map__58200","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58196","cljs.core/chunk-rest","map__58202","cljs.core/first","cljs.core/cons","cljs.core/rest","uid","title","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.daily-notes","js/athens.devcards.daily-notes.t_athens$devcards$daily_notes58204","athens.devcards.daily-notes/t_athens$devcards$daily_notes58204","_58206","meta58205","this__41676__auto__","devcard-opts__41677__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__41695__auto__","cljs.core/fn?","data-atom__41696__auto__","owner__41697__auto__","reagent.core/as-element","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.daily-notes/->t_athens$devcards$daily_notes58204","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.daily-notes\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.devcards.node-page :refer [node-page-component]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as string]\n    [devcards.core :refer-macros [defcard-rg]]\n    [garden.selectors :as selectors]\n    [goog.functions :refer [debounce]]\n    [posh.reagent :refer [pull pull-many q]]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]\n    [tick.alpha.api :as t]\n    [tick.locale-en-us]))\n\n;;; Styles\n\n\n;;; Helpers\n\n\n\n\n(def US-format (t/formatter \"MM-dd-yyyy\"))\n\n\n(def title-format (t/formatter \"LLLL dd, yyyy\"))\n\n\n(defn date-string\n  [ts]\n  (if (< ts 1) ;; TODO why this predicate?\n    [:span \"(unknown date)\"]\n    (as-> (js/Date. ts) x\n      (t/instant x)\n      (t/date-time x)\n      (t/format (t/formatter \"LLLL MM, yyyy h':'ma\") x)\n      (string/replace x #\"AM\" \"am\")\n      (string/replace x #\"PM\" \"pm\"))))\n\n\n(defn get-day\n  \"Returns today's date or a date OFFSET days before today\"\n  ([] (get-day 0))\n  ([offset]\n   (let [day (t/-\n               (t/date-time)\n               (t/new-duration offset :days))]\n     {:uid   (t/format US-format day)\n      :title (t/format title-format day)})))\n\n\n(defn scroll-daily-notes\n  [e]\n  (let [daily-notes @(subscribe [:daily-notes])\n        main-content (.. js/document (getElementById \"main-content\"))\n        client-height (.. main-content -clientHeight) ;; could also use -offsetHeight. get the same value\n        scroll-top (.. main-content -scrollTop)\n        ratio (/ client-height scroll-top)]\n    (prn client-height scroll-top percent)\n    (when (<= ratio 30) ;; when scrolled all the way down, ratio is 10, because height is 110vh\n      (prn \"DISPATCH\")\n      (dispatch [:next-daily-note (get-day (count daily-notes))]))))\n\n(def db-scroll-daily-notes (debounce scroll-daily-notes 500))\n\n;;; Scroll\n\n;;; Components\n\n(defn daily-notes-panel\n  []\n  (let [note-refs (subscribe [:daily-notes])]\n    (if (empty? @note-refs)\n      (dispatch [:next-daily-note (get-day)]))\n    (fn []\n\n      (let [notes (pull-many db/dsdb\n                    '[*]\n                    ;;'[:db/id :block/uid :block/string :block/open :block/order {:block/children ...}]\n                    (map (fn [x] [:block/uid x]) @note-refs))]\n        [:div.daily-notes (use-style {:display        \"flex\"\n                                      :flex           \"0 0 auto\"\n                                      :flex-direction \"column\"\n                                      :height \"110vh\"}\n                            {:on-scroll (fn [x] (prn \"hi\" x))})\n\n         (doall\n           (for [{:keys [block/uid node/title]} @notes]\n             ^{:key uid}\n             [:<>\n              [:div (use-style {:min-height \"550px\"})\n               [:h1 title]]\n              ;;[node-page-component [:block/uid uid]]\n              [:hr (use-style {:border \"1px solid black\"\n                               :width  \"100%\"}\n                     {:key title})]]))\n\n         [:div\n          [:h1 (use-style {:color \"gray\"}) \"Preview\"]]]))))\n\n\n;;; Devcards\n\n(defcard-rg Daily-Notes\n  [daily-notes-panel])\n"]}