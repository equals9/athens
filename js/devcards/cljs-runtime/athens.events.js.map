{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__46515__auto__","result__46516__auto__","debux.common.util/send-trace!","e","e60349","_","athens.db/rfdb","db","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","e60350","error","cljs.core/assoc-in","e60357","e60364","p__60370","vec__60371","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","e60374","p__60379","vec__60383","uid","p__60410","vec__60416","map","p__60421","vec__60422","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","e60425","athens.db/athens-url","p__60433","vec__60434","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__60437","map__60438","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","temp__5735__auto__","prev","cljs.core/deref","p1__60440#","athens.db/find-prev","athens.db/history","athens.db/dsdb","next","p1__60441#","athens.db/find-next","p__60445","vec__60446","athens.events/get-block","id","G__60451","G__60452","G__60453","posh.reagent/pull","athens.events/get-parent","eid","G__60456","G__60457","datascript.core/entity","cljs.core/first","p__60460","vec__60462","block","parent","older-sib","p1__60459#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","new-block","cljs.core/count","reindex-blocks","G__60472","G__60473","G__60474","G__60475","datascript.core/q","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__60467","vec__60469","order","p__60481","vec__60482","grandpa","G__60492","G__60493","G__60494","G__60495","p__60486","vec__60487","p__60499","p__60500","p__60501","map__60502","map__60503","map__60505","athens.events/target-child","parent-eid","target-eid","new-parent-children","G__60519","G__60520","G__60521","G__60522","p__60515","vec__60516","new-target-children","G__60529","G__60530","G__60531","p__60525","vec__60526","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","source","target","t-order","s-order","inc-or-dec","cljs.core/inc","cljs.core/dec","reindex","G__60543","G__60544","G__60545","G__60546","G__60547","G__60548","G__60549","p__60538","vec__60539","_uid","athens.events/target-sibling-diff-parent","source-parent","target-parent","source-parent-children","G__60562","G__60563","G__60564","G__60565","p__60558","vec__60559","target-parent-children","G__60572","G__60573","G__60574","G__60575","p__60567","vec__60569","p__60578","vec__60579","e60585","p__60596","vec__60598","source-uid","target-uid","kind","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (assoc db :athena (not (:athena db)))))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:db         db/rfdb\n              :async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn next})))\n\n\n\n\n;;; dsdb events (transactions)\n\n(reg-event-fx\n  :transact-event\n  (fn [_ [_ datoms]]\n    {:transact datoms}))\n\n\n;; Block Editing\n\n(defn get-block\n  [id]\n  @(pull db/dsdb '[:db/id :block/uid :block/order {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (let [eid (-> (d/entity @db/dsdb id)\n              :block/_children\n              first\n              :db/id)]\n    (get-block eid)))\n\n\n;; find sibling block with order - 1\n;; add to end of sib children. no need to reindex?\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [block (get-block [:block/uid uid])\n          parent (get-parent [:block/uid uid])\n          older-sib (->> parent\n                      :block/children\n                      (filter #(= (dec (:block/order block)) (:block/order %)))\n                      first\n                      :db/id\n                      get-block)\n          new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n          reindex-blocks (->> (d/q '[:find ?ch ?new-order\n                                     :in $ ?parent ?source-order\n                                     :where\n                                     [?parent :block/children ?ch]\n                                     [?ch :block/order ?order]\n                                     [(> ?order ?source-order)]\n                                     [(dec ?order) ?new-order]]\n                                @db/dsdb (:db/id parent) (:block/order block))\n                           (map (fn [[id order]] {:db/id id :block/order order})))]\n      {:transact [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                  {:db/id (:db/id older-sib) :block/children [new-block]}\n                  {:db/id (:db/id parent) :block/children reindex-blocks}]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (get-parent [:block/uid uid])\n          grandpa (get-parent (:db/id parent))\n          reindex-blocks (->> (d/q '[:find ?new-order ?children\n                                     :in $ ?grandpa ?parent-order\n                                     :where\n                                     [?grandpa :block/children ?children]\n                                     [?children :block/order ?order]\n                                     [(> ?order ?parent-order)]\n                                     [(inc ?order) ?new-order]]\n                                @db/dsdb (:db/id grandpa) (:order parent))\n                           (map (fn [[order id]] {:db/id id :block/order order})))]\n      {:transact [[:db/add [:block/uid uid] :block/order (inc (:block/order parent))]\n                  [:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                  [:db/add (:db/id grandpa) :block/children [:block/uid uid]]\n                  {:db/add (:db/id grandpa) :block/children reindex-blocks}]})))\n\n\n\n\n\n;; Drag and Drop\n\n\n(defn target-child\n  [{:block/keys [uid order]} {parent-eid :db/id} {target-eid :db/id}]\n  (let [new-parent-children (->> (d/q '[:find ?ch ?new-order\n                                         :in $ ?parent ?source-order\n                                         :where\n                                         [?parent :block/children ?ch]\n                                         [?ch :block/order ?order]\n                                         [(> ?order ?source-order)]\n                                         [(dec ?order) ?new-order]]\n                                    @db/dsdb parent-eid order)\n                              (map (fn [[id order]] {:db/id id :block/order order})))\n        new-target-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ ?parent\n                                        :where\n                                        [?parent :block/children ?ch]\n                                        [?ch :block/order ?order]\n                                        [(inc ?order) ?new-order]]\n                                   @db/dsdb target-eid)\n                              (map (fn [[id order]] {:db/id id :block/order order}))\n                              (concat [{:block/uid uid :block/order 0}]))]\n    [[:db/retract parent-eid :block/children [:block/uid uid]] ;; retract source from parent\n     {:db/add parent-eid :block/children new-parent-children} ;; reindex parent without source\n     ;; TODO: not sure why I need to use :db/id here and not :db/add\n     {:db/id target-eid :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between [s t x]\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                       @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                  (map (fn [[eid order _uid]] {:db/id eid :block/order order}))\n                  (concat [{:db/id (:db/id source) :block/order (inc t-order)}]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  \"source: reindex everything after source-order\n target: reindex everything after target-order\"\n  [source target source-parent target-parent]\n  (let [source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ ?parent ?source-order\n                                           :where\n                                           [?parent :block/children ?ch]\n                                           [?ch :block/order ?order]\n                                           [(> ?order ?source-order)]\n                                           [(dec ?order) ?new-order]]\n                                      @db/dsdb (:db/id source-parent) (:block/order source))\n                                 (map (fn [[id order]] {:db/id id :block/order order})))\n        target-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ ?parent ?target-order\n                                           :where\n                                           [?parent :block/children ?ch]\n                                           [?ch :block/order ?order]\n                                           [(> ?order ?target-order)]\n                                           [(inc ?order) ?new-order]]\n                                      @db/dsdb (:db/id target-parent) (:block/order target))\n                                 (map (fn [[id order]] {:db/id id :block/order order}))\n                                 (concat [{:db/id (:db/id source) :block/order (inc (:block/order target))}]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children}\n     {:db/id (:db/id target-parent) :block/children target-parent-children}]))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (let [source        (get-block [:block/uid source-uid])\n                   target        (get-block [:block/uid target-uid])\n                   source-parent (get-parent [:block/uid source-uid])\n                   target-parent (get-parent [:block/uid target-uid])]\n               (prn target)\n               {:transact\n                (cond\n                  ;; child always has same behavior: move to first child of target\n                  (= kind :child) (target-child source source-parent target)\n\n                  ;; do nothing if target is directly above source\n                  (and\n                    (= source-parent target-parent)\n                    (= 1 (- (:block/order source) (:block/order target))))\n                  nil\n\n                  ;; re-order blocks between source and target\n                  (= source-parent target-parent)\n                  (target-sibling-same-parent source target source-parent)\n\n                  ;;; when parent is different, re-index both source-parent and target-parent\n                  (not= source-parent target-parent)\n                  (target-sibling-diff-parent source target source-parent target-parent)\n\n                  :else nil)})))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}