{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__46508__auto__","result__46509__auto__","debux.common.util/send-trace!","e","e55700","_","athens.db/rfdb","db","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","e55701","error","cljs.core/assoc-in","e55702","e55703","p__55704","vec__55705","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","e55708","p__55709","vec__55710","uid","p__55713","vec__55714","map","p__55717","vec__55718","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","e55721","athens.db/athens-url","p__55722","vec__55723","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__55726","map__55727","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","athens.events/reindex","blocks","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","x","cljs.core/vec","athens.events/reindex-parent","source","parent","p1__55729#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.events/reindex-target","_source","target","cljs.core/deref","target-entity","G__55730","G__55731","G__55732","posh.reagent/pull","athens.db/dsdb","cljs.core/cons","athens.events/get-parent","parent-eid","G__55733","G__55734","G__55735","cljs.core/first","G__55736","G__55737","G__55738","p__55739","vec__55740","map__55743","e55745","p__55746","vec__55747","map__55750","_kind","parent-children","_target-children"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (assoc db :athena (not (:athena db)))))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:db         db/rfdb\n              :async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}\n                                            ]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})\n    ))\n\n\n\n;; WIP: dsdb events (transactions)\n\n(defn reindex\n  [blocks]\n  (->> blocks\n    (sort-by :block/order)\n    (map-indexed (fn [i x] (assoc x :block/order i)))\n    vec))\n\n\n(defn reindex-parent\n  [source parent]\n  (->> parent\n    :block/children\n    (remove #(= (:block/uid %) source))\n    reindex))\n\n\n(defn reindex-target\n  [_source target]\n  (let [target-entity @(pull db/dsdb '[* {:block/children [:db/id :block/order]}] [:block/uid target])]\n    (->> target-entity\n      :block/children\n      ;;(cons {:block/uid source :block/order -1})\n      (cons {:db/id 2349 :block/order -1})\n      reindex)))\n\n\n(defn get-parent\n  \"takes in a block string and returns a parent with its children\"\n  [uid]\n  (let [parent-eid (-> @(pull db/dsdb '[:block/_children] [:block/uid uid])\n                     :block/_children\n                     first\n                     :db/id)]\n    @(pull db/dsdb '[:db/id {:block/children [:db/id :block/uid :block/order]}] parent-eid)))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ {:keys [source target _kind]}]]\n             (let [parent (get-parent source)\n                   parent-children (reindex-parent source parent)\n                   _target-children (reindex-target source target)]\n               {:transact [{:db/add [:block/uid source] :block/children parent-children}\n                           [:db/retract (:db/id parent) :block/children [:block/uid source]]\n\n                           ;; FIXME: for some reason unable to transact multiple children\n                           ;; Get error: Error: Lookup ref should contain 2 elements: [1 2 3 4]\n                           ;;{:db/add [:block/uid target] :block/children target-children}\n                           ]})))\n\n\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}