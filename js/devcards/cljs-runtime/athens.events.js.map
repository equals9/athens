{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["cljs.core/deref","athens.events/get-block","id","G__61434","G__61435","G__61436","posh.reagent/pull","athens.db/dsdb","athens.events/get-parent","eid","G__61437","G__61438","datascript.core/entity","cljs.core/first","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__46521__auto__","result__46522__auto__","debux.common.util/send-trace!","e","e61439","_","athens.db/rfdb","db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__61440","vec__61441","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","item","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__61444","vec__61445","G__61450","fexpr__61449","e61448","p__61451","vec__61452","selected-page","fexpr__61455","cljs.core/set","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__61456","vec__61457","uid","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__61460","p__61461","map__61462","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__61463","G__61468","G__61469","G__61470","e61467","p__61471","p__61472","map__61473","vec__61474","block","G__61478","G__61479","G__61480","datascript.core/pull","new-item","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-items","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","e61481","error","cljs.core/assoc-in","e61482","e61483","p__61484","vec__61485","e61488","p__61489","vec__61490","p__61493","vec__61494","map","p__61497","vec__61498","e61501","athens.db/athens-url","p__61502","vec__61503","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__61506","map__61507","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","p__61509","vec__61510","temp__5735__auto__","prev","p1__61513#","athens.db/find-prev","athens.db/history","next","p1__61514#","athens.db/find-next","p__61515","vec__61516","title","now","athens.util/now-ts","p__61519","p__61520","map__61521","vec__61522","map__61525","athens.db/e-by-av","athens.events/rules","p__61528","vec__61529","_uid","athens.events/split-block","val","sel-start","parent","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","new-uid","athens.util/gen-block-uid","new-block","reindex","G__61536","G__61537","G__61538","G__61539","G__61540","datascript.core/q","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__61532","vec__61533","order","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/bump-up","G__61545","G__61546","G__61547","G__61548","G__61549","p__61541","vec__61542","p__61550","vec__61551","cljs.core/empty?","p__61555","vec__61556","older-sib","p1__61554#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","reindex-blocks","G__61563","G__61564","G__61565","G__61566","G__61567","p__61559","vec__61560","p__61568","vec__61569","grandpa","reindex-grandpa","G__61576","G__61577","G__61578","G__61579","G__61580","p__61572","vec__61573","and__4174__auto__","athens.events/target-child","source","source-parent","target","new-parent-children","G__61585","G__61586","G__61587","G__61588","G__61589","p__61581","vec__61582","new-target-children","G__61594","G__61595","G__61596","G__61597","G__61598","p__61590","vec__61591","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","t-order","s-order","inc-or-dec","cljs.core/dec","G__61603","G__61604","G__61605","G__61606","G__61607","G__61608","G__61609","p__61599","vec__61600","athens.events/target-sibling-diff-parent","target-parent","source-parent-children","G__61614","G__61615","G__61616","G__61617","G__61618","p__61610","vec__61611","target-parent-children","G__61623","G__61624","G__61625","G__61626","G__61627","p__61619","vec__61620","p__61628","vec__61629","e61632","p__61633","vec__61634","source-uid","target-uid","kind","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;; Utils\n\n\n(defn get-block\n  [id]\n  @(pull db/dsdb '[:db/id :block/uid :block/order {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (let [eid (-> (d/entity @db/dsdb id)\n              :block/_children\n              first\n              :db/id)]\n    (get-block eid)))\n\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :toggle-devtool\n  (fn [db _]\n    (update db :devtool not)))\n\n\n(reg-event-db\n  :toggle-left-sidebar\n  (fn [db _]\n    (update db :left-sidebar not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n(reg-event-db\n  :athena/update-recent\n  (fn-traced [db [_ selected-page]]\n    (when (nil? ((set (:athena/recent-items db)) selected-page))\n      (update db :athena/recent-items conj selected-page))))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: toggle open right sidebar if not open\n;; FIXME: what happens when item is already in sidebar? all indices increment, which is not right\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n    (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n          new-item  (merge block {:open true :index -1})\n          new-items (assoc (:right-sidebar/items db) uid new-item)\n          inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                               {}\n                               new-items)\n          sorted-items (into (sorted-map-by (fn [k1 k2]\n                                              (compare\n                                                [(get-in new-items [k1 :index]) k2]\n                                                [(get-in new-items [k2 :index]) k1]))) inc-items)]\n      {:db (assoc db :right-sidebar/items sorted-items)\n       :dispatch (when (false? (:right-sidebar/open db))\n                   [:right-sidebar/toggle])})))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot ;; FIXME: rename to init-dsdb?\n  (fn-traced [_ _]\n             {:async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})))\n\n\n(reg-event-fx\n  :transact-event\n  (fn [_ [_ datoms]]\n    {:transact datoms}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn next})))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)]\n      {:transact [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now}]})))\n\n\n(reg-event-fx\n  :next-daily-note\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes conj uid)\n          now (now-ts)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db new-db\n         :transact [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now}]}))))\n\n\n\n;;; dsdb events (transactions)\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ _uid]]))\n\n\n;; TODO but how to set focus... especially async\n(defn split-block\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        head (subs val 0 sel-start)\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (:block/order block))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string head]\n                {:db/id (:db/id parent)\n                 :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n(defn bump-up\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (inc (:block/order block)))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string \"\"]\n                {:db/id (:db/id parent) :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n;; TODO: if enter at end of block, if block open, insert new 0th child. otherwise, add sibling (default behavior right now)\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val sel-start]]\n    (cond\n      (not (zero? sel-start)) (split-block uid val sel-start)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? sel-start) val) (bump-up uid val sel-start))))\n\n\n;; TODO: no-op when indenting as the right-most child\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [block (get-block [:block/uid uid])\n          parent (get-parent [:block/uid uid])\n          older-sib (->> parent\n                      :block/children\n                      (filter #(= (dec (:block/order block)) (:block/order %)))\n                      first\n                      :db/id\n                      get-block)\n          new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n          reindex-blocks (->> (d/q '[:find ?ch ?new-o\n                                     :in $ % ?p ?at\n                                     :where (dec-after ?p ?at ?ch ?new-o)]\n                                @db/dsdb rules (:db/id parent) (:block/order block))\n                           (map (fn [[id order]] {:db/id id :block/order order})))]\n      {:transact [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                  {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                  {:db/id (:db/id parent) :block/children reindex-blocks}]}))) ;; reindex parent\n\n\n;; TODO: no-op when user tries to unindent to a child out of current context\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (get-parent [:block/uid uid])\n          grandpa (get-parent (:db/id parent))\n          new-block {:block/uid uid :block/order (inc (:block/order parent))}\n          reindex-grandpa (->> (d/q '[:find ?ch ?new-order\n                                      :in $ % ?grandpa ?parent-order\n                                      :where (inc-after ?grandpa ?parent-order ?ch ?new-order)]\n                                 @db/dsdb rules (:db/id grandpa) (:block/order parent))\n                            (map (fn [[id order]] {:db/id id :block/order order}))\n                            (concat [new-block]))]\n      (when (and parent grandpa)\n        {:transact [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                    {:db/id (:db/id grandpa) :block/children reindex-grandpa}]}))))\n\n\n(defn target-child\n  [source source-parent target]\n  (let [new-block {:block/uid (:block/uid source) :block/order 0}\n        new-parent-children (->> (d/q '[:find ?ch ?new-order\n                                         :in $ % ?parent ?source-order\n                                         :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                    @db/dsdb rules (:db/id source-parent) (:block/order source))\n                              (map (fn [[id order]] {:db/id id :block/order order})))\n        new-target-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ % ?parent ?at\n                                        :where (inc-after ?parent ?at ?ch ?new-order)]\n                                   @db/dsdb rules (:dbid target) 0)\n                              (map (fn [[id order]] {:db/id id :block/order order}))\n                              (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]] ;; retract source from parent\n     {:db/add (:db/id source-parent) :block/children new-parent-children} ;; reindex parent without source\n     {:db/id (:db/id target) :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        new-block {:db/id (:db/id source) :block/order (inc t-order)}\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                       @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?source-order\n                                           :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                 (map (fn [[id order]] {:db/id id :block/order order})))\n        target-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?target-order\n                                           :where (inc-after ?parent ?target-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id target-parent) (:block/order target))\n                                 (map (fn [[id order]] {:db/id id :block/order order}))\n                                 (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children} ;; reindex source\n     {:db/id (:db/id target-parent) :block/children target-parent-children}])) ;; reindex target\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (let [source        (get-block [:block/uid source-uid])\n                   target        (get-block [:block/uid target-uid])\n                   source-parent (get-parent [:block/uid source-uid])\n                   target-parent (get-parent [:block/uid target-uid])]\n               {:transact\n                (cond\n                  ;; child always has same behavior: move to first child of target\n                  (= kind :child) (target-child source source-parent target)\n                  ;; do nothing if target is directly above source\n                  (and (= source-parent target-parent)\n                    (= 1 (- (:block/order source) (:block/order target)))) nil\n                  ;; re-order blocks between source and target\n                  (= source-parent target-parent) (target-sibling-same-parent source target source-parent)\n                  ;;; when parent is different, re-index both source-parent and target-parent\n                  (not= source-parent target-parent) (target-sibling-diff-parent source target source-parent target-parent))})))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}