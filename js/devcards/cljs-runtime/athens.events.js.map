{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__50925__auto__","result__50926__auto__","debux.common.util/send-trace!","e","e60460","_","athens.db/rfdb","p__60461","vec__60462","cljs.core.nth","db","filepath","cljs.core.assoc","p__60465","vec__60466","p__60469","vec__60470","cljs.core.update","cljs.core/not","p__60473","vec__60474","G__60479","fexpr__60478","e60477","p__60480","vec__60481","selected-page","fexpr__60484","cljs.core/set","cljs.core/conj","p__60485","vec__60486","item","cljs.core.update_in","p__60489","vec__60490","uid","cljs.core/dissoc","re_frame.core.reg_event_fx","p__60493","p__60494","map__60495","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__60496","G__60501","cljs.core/deref","G__60502","G__60503","e60500","p__60504","p__60505","map__60506","vec__60507","block","G__60511","G__60512","G__60513","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge","new-items","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in","p__60514","vec__60515","p__60518","vec__60519","uids","cljs.core/concat","p__60522","vec__60523","selected-items","first-item","cljs.core/first","prev-block-uid-","athens.db/prev-block-uid","prev-block","athens.db/get-block","new-vec","p__60526","vec__60527","last-item","cljs.core/last","next-block-uid-","athens.db/next-block-uid","cljs.core.conj","p__60530","p__60531","map__60532","vec__60533","retract-vecs","cljs.core.mapv","e60537","alert","e60538","e60539","cljs.core/assoc-in","e60540","athens.events/focus-el","id","temp__5733__auto__","el","goog.dom/getElement","p__60541","vec__60542","e60545","e60546","p__60547","vec__60548","js/setTimeout","p__60551","vec__60552","p__60555","p__60556","map__60557","vec__60558","map__60561","title","new-db","athens.db/e-by-av","p__60564","map__60565","rfdb","athens.db/athens-url","p__60567","vec__60568","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.inject_cofx","p__60571","map__60572","local-storage","datascript.transit/read-transit-str","p__60574","vec__60575","p__60578","vec__60579","p__60582","vec__60583","p__60586","vec__60587","now","athens.util/now-ts","child-uid","athens.util/gen-block-uid","child","p__60590","vec__60591","athens.db/get-children-recursively","p__60594","vec__60595","sidebar-ents","G__60598","G__60599","datascript.core/q","cljs.core/count","p__60600","vec__60601","db-filepath","re_frame.core.subscribe","datascript.transit/write-transit-str","temp__5735__auto__","prev","p1__60604#","athens.db/find-prev","athens.db/history","next","p1__60605#","athens.db/find-next","athens.events/inc-after","eid","order","G__60606","G__60607","G__60608","G__60609","G__60610","athens.db/rules","athens.events/dec-after","G__60611","G__60612","G__60613","G__60614","G__60615","athens.events/plus-after","x","G__60616","G__60617","G__60618","G__60619","G__60620","G__60621","p__60622","vec__60623","or__4126__auto__","p__60626","vec__60627","p__60630","vec__60631","p__60634","vec__60635","athens.events/backspace","value","map__60638","parent","athens.db/get-parent","reindex","prev-block-string","and__4115__auto__","p__60640","vec__60641","athens.events/split-block","val","index","head","cljs.core.subs","tail","new-uid","new-block","cljs.core.concat","athens.events/bump-up","athens.events/new-block","athens.events/enter","root-block?","cljs.core/boolean","cljs.core/empty?","p__60644","vec__60645","athens.events/indent","older-sib","p1__60648#","cljs.core.filter","cljs.core._EQ_","p__60649","vec__60650","athens.events/unindent","context-root-uid","grandpa","reindex-grandpa","p__60653","p__60654","map__60655","vec__60656","athens.events/drop-child","source","source-parent","target","new-source-block","reindex-source-parent","reindex-target-parent","athens.events/between","s","t","athens.events/drop-above-same-parent","s-order","t-order","inc-or-dec","cljs.core/dec","G__60660","G__60661","G__60662","G__60663","G__60664","G__60665","G__60666","athens.events/drop-above-diff-parent","target-parent","athens.events/drop-below-same-parent","athens.events/drop-below-diff-parent","athens.events/drop-bullet","source-uid","target-uid","kind","same-parent?","p__60667","vec__60668","e60671","p__60672","vec__60673","p__60676","vec__60677","text","map__60680","map__60681","lines","clojure.string/split-lines","b-order","p-id","new-datoms","cljs.core.map_indexed","i","start","children","athens.events/left-sidebar-drop-above","source-eid","G__60684","G__60685","G__60686","new-source","new-indices","G__60687","G__60688","G__60689","G__60690","G__60691","G__60692","p__60693","vec__60694","e60697","p__60698","vec__60699","source-order","target-order","athens.events/left-sidebar-drop-below","G__60702","G__60703","G__60704","G__60705","G__60706","G__60707","G__60708","G__60709","p__60710","vec__60711","e60714","p__60715","vec__60716"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db :refer [rules get-children-recursively]]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [goog.dom :refer [getElement]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx subscribe]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :db/update-filepath\n  (fn [db [_ filepath]]\n    (assoc db :db/filepath filepath)))\n\n\n(reg-event-db\n  :db/sync\n  (fn [db [_]]\n    (assoc db :db/synced true)))\n\n\n(reg-event-db\n  :db/not-synced\n  (fn [db [_]]\n    (assoc db :db/synced false)))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n(reg-event-db\n  :dragging-global/toggle\n  (fn [db _]\n    (update db :dragging-global not)))\n\n\n(reg-event-db\n  :selected/add-item\n  (fn [db [_ uid]]\n    (update db :selected/items conj uid)))\n\n\n(reg-event-db\n  :selected/add-items\n  (fn [db [_ uids]]\n    (update db :selected/items concat uids)))\n\n\n(reg-event-db\n  :selected/clear-items\n  (fn [db _]\n    (assoc db :selected/items [])))\n\n\n(reg-event-db\n  :selected/up\n  (fn [db [_ selected-items]]\n    (let [first-item (first selected-items)\n          prev-block-uid- (db/prev-block-uid first-item)\n          prev-block (db/get-block [:block/uid prev-block-uid-])\n         ;;parent (db/get-parent [:block/uid first-item])\n          new-vec (cond\n                   ;; if prev-block is root node TODO: (OR context root), don't do anything\n                    (:node/title prev-block) nil\n                   ;; if prev block is parent, replace head of vector with parent\n                   ;; TODO needs to replace all children blocks of the parent\n                   ;; TODO: needs to delete blocks recursively. :db/retractEntity does not delete recursively, which would create orphan blocks\n                   ;;(= (:block/uid parent) prev-block-uid-) (assoc selected-items 0 prev-block-uid-)\n                    :else (into [prev-block-uid-] selected-items))]\n      (assoc db :selected/items new-vec))))\n\n\n(reg-event-db\n  :selected/down\n  (fn [db [_ selected-items]]\n    (let [last-item (last selected-items)\n          next-block-uid- (db/next-block-uid last-item)\n          new-vec (conj selected-items next-block-uid-)]\n      (assoc db :selected/items new-vec))))\n\n\n;; TODO: minus-after to reindex but what about nested blocks?\n(reg-event-fx\n  :selected/delete\n  (fn [{:keys [db]} [_ selected-items]]\n    (let [retract-vecs (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n                             selected-items)]\n      {:dispatch [:transact retract-vecs]\n       :db       (assoc db :selected/items [])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n;; Block Events\n;; TODO: refactor to an effect\n(defn focus-el\n  [id]\n  (fn []\n    (if-let [el (getElement id)]\n      (.focus el))))\n\n\n(reg-event-db\n  :editing/uid\n  (fn-traced [db [_ uid]]\n             (js/setTimeout (focus-el (str \"editable-uid-\" uid)) 300)\n             (assoc db :editing/uid uid)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n;; TODO: don't use app-db, use dsdb\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:dispatch-n [[:reset-conn new-db]\n                    [:local-storage/set-db new-db]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n;; Datascript\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ datoms]]\n    {:transact! datoms\n     :dispatch [:db/not-synced]}))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)\n          child-uid (gen-block-uid)\n          child {:db/id -2 :create/time now :edit/time now :block/uid child-uid :block/order 0 :block/open true :block/string \"\"}]\n      {:transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now :block/children [child]}]\n       :dispatch [:editing/uid child-uid]})))\n\n\n(reg-event-fx\n  :page/delete\n  (fn [_ [_ uid]]\n    {:transact! (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]) (get-children-recursively uid))}))\n\n\n(reg-event-fx\n  :page/add-shortcut\n  (fn [_ [_ uid]]\n    (let [sidebar-ents (d/q '[:find ?e\n                              :where\n                              [?e :page/sidebar _]]\n                            @db/dsdb)]\n      {:transact! [{:block/uid uid :page/sidebar (count sidebar-ents)}]})))\n\n\n;; TODO: reindex\n(reg-event-fx\n  :page/remove-shortcut\n  (fn [_ [_ uid]]\n    {:transact! [[:db/retract [:block/uid uid] :page/sidebar]]}))\n\n\n(reg-event-fx\n  :save\n  (fn [_ _]\n    (let [db-filepath (subscribe [:db/filepath])]\n      {:fs/write! [@db-filepath (dt/write-transit-str @db/dsdb)]\n       :dispatch  [:db/sync]})))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(defn plus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (plus-after ?p ?at ?ch ?new-o ?x)]\n            @db/dsdb rules eid order x)))\n\n\n(reg-event-fx\n  :up\n  (fn [_ [_ uid]]\n   ;; FIXME: specify behavior when going up would go to title or context-root\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :left\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :down\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :right\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n;; no-op if root 0th child\n;; otherwise delete block and join with previous block\n(defn backspace\n  [uid value]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        reindex (dec-after (:db/id parent) (:block/order block))\n        prev-block-uid- (db/prev-block-uid uid)\n        {prev-block-string :block/string} (db/get-block [:block/uid prev-block-uid-])]\n    (cond\n      (and (:node/title parent) (zero? (:block/order block))) nil\n      (:block/children block) nil\n      :else {:dispatch-later [{:ms 0 :dispatch [:transact [[:db/retractEntity [:block/uid uid]]\n                                                           {:db/id [:block/uid prev-block-uid-] :block/string (str prev-block-string value) :edit/time (now-ts)}\n                                                           {:db/id (:db/id parent) :block/children reindex}]]}\n                              {:ms 10 :dispatch [:editing/uid prev-block-uid-]}]})))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ uid value]]\n    (backspace uid value)))\n\n\n(defn split-block\n  [uid val index]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        head (subs val 0 index)\n        tail (subs val index)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id block) :block/string head :edit/time (now-ts)}\n                 {:db/id (:db/id parent)\n                  :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n(defn bump-up\n  \"If user presses enter at the start of non-empty string, push that block down and\n  and start editing a new block in the position of originating block - 'bump up' \"\n  [uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (dec (:block/order block)))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id parent) :block/children reindex :block/string \"\"}]\n     :dispatch [:editing/uid new-uid]}))\n\n\n(defn new-block\n  \"Add a new-block after block\"\n  [block parent]\n  (let [new-uid   (gen-block-uid)\n        new-block {:block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:dispatch-n [[:transact [{:db/id          [:block/uid (:block/uid parent)]\n                               :block/children reindex}]]\n                  [:editing/uid new-uid]]}))\n\n\n(defn enter\n  [uid val index]\n  (let [block       (db/get-block [:block/uid uid])\n        parent      (db/get-parent [:block/uid uid])\n        root-block? (boolean (:node/title parent))]\n    (cond\n      (not (zero? index)) (split-block uid val index)\n      (and (empty? val) root-block?) (new-block block parent)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? index) val) (bump-up uid))))\n\n\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val index]]\n    (enter uid val index)))\n\n\n(defn indent\n  [uid]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        older-sib (->> parent\n                       :block/children\n                       (filter #(= (dec (:block/order block)) (:block/order %)))\n                       first\n                       :db/id\n                       db/get-block)\n        new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n        reindex (dec-after (:db/id parent) (:block/order block))]\n    {:transact! [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                 {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                 {:db/id (:db/id parent) :block/children reindex}]}))\n\n\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (indent uid)))\n\n\n(defn unindent\n  [uid context-root-uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        grandpa (db/get-parent (:db/id parent))\n        new-block {:block/uid uid :block/order (inc (:block/order parent))}\n        reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))\n                             (concat [new-block]))]\n    ;; if parent is context-root or has node/title, no-op\n    (when-not (or (:node/title parent) (= (:block/uid parent) context-root-uid))\n      {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                   {:db/id (:db/id grandpa) :block/children reindex-grandpa}]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [{rfdb :db} [_ uid]]\n    (let [context-root-uid (get-in rfdb [:current-route :path-params :id])]\n      (unindent uid context-root-uid))))\n\n\n(defn drop-child\n  \"Order will always be 0\"\n  [source source-parent target]\n  (let [new-source-block {:block/uid (:block/uid source) :block/order 0}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:dbid target) (dec 0))\n                                   (concat [new-source-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target) :block/children reindex-target-parent}]))\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn drop-above-same-parent\n  \"Give source block target block's order\n    When source is below target, increment block orders between source and target-1\n    When source is above target, decrement block order between...\";; TODO\n\n  [source target parent]\n  (let [s-order (:block/order source)\n        t-order (:block/order target)]\n    (if (= s-order (dec t-order))\n      nil\n      (let [new-source-block {:db/id (:db/id source) :block/order t-order}\n            inc-or-dec       (if (> s-order t-order) inc dec)\n            reindex          (->> (d/q '[:find ?ch ?new-order\n                                         :keys db/id block/order\n                                         :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                                         :where\n                                         [?parent :block/children ?ch]\n                                         [?ch :block/order ?order]\n                                         [(?between ?s-order ?t-order ?order)]\n                                         [(?inc-or-dec ?order) ?new-order]]\n                                       @db/dsdb (:db/id parent) s-order (dec t-order) between inc-or-dec)\n                                  (concat [new-source-block]))]\n        [{:db/id (:db/id parent) :block/children reindex}]))))\n\n\n(defn drop-above-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block             {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:db/id target-parent) (dec (:block/order target)))\n                                   (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children reindex-target-parent}]))\n\n\n(defn drop-below-same-parent\n  \"source block's new order is target block's order\"\n  [source source-parent target]\n  (let [new-source-block {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex (dec-after (:db/id source-parent) (:block/order source))]\n    (concat [new-source-block] reindex)))\n\n\n(defn drop-below-diff-parent\n  \"source block's new order is target-order + 1\"\n  [source source-parent target target-parent]\n  (let [new-source-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        reindex-source-parent   (dec-after (:db/id source-parent) (:block/order source))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children [new-source-block]}]))\n\n\n;; TODO: don't transact when we know TXes won't change anything\n(defn drop-bullet\n  [source-uid target-uid kind]\n  (let [source        (db/get-block [:block/uid source-uid])\n        target        (db/get-block [:block/uid target-uid])\n        source-parent (db/get-parent [:block/uid source-uid])\n        target-parent (db/get-parent [:block/uid target-uid])\n        same-parent? (= source-parent target-parent)]\n    {:transact!\n     (cond\n       (= kind :child)                          (drop-child             source source-parent target)\n       (and (= kind :below) same-parent?)       (drop-below-same-parent source source-parent target)\n       (and (= kind :below) (not same-parent?)) (drop-below-diff-parent source source-parent target target-parent)\n       (and (= kind :above) same-parent?)       (drop-above-same-parent source target source-parent)\n       (and (= kind :above) (not same-parent?)) (drop-above-diff-parent source target source-parent target-parent))}))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (drop-bullet source-uid target-uid kind)))\n\n\n;; TODO: convert to tree instead of flat map (handling indentation), write tests for markdown list parsing\n(reg-event-fx\n  :paste\n  (fn [_ [_ uid text]]\n    (let [lines (clojure.string/split-lines text)\n          block (db/get-block [:block/uid uid])\n          {b-order :block/order} block\n          parent (db/get-parent [:block/uid uid])\n          {p-id :db/id} parent\n          now (now-ts)\n          new-datoms (map-indexed (fn [i x]\n                                    (let [start (subs x 0 2)\n                                          s (if (or (= start \"- \")\n                                                    (= start \"* \"))\n                                              (subs x 2)\n                                              x)]\n                                      {:block/uid    (gen-block-uid)\n                                       :create/time  now\n                                       :edit/time    now\n                                       :block/order  (+ 1 i b-order)\n                                       :block/string s}))\n                                  lines)\n          reindex (plus-after p-id b-order (count lines))\n          children (concat new-datoms reindex)]\n      {:dispatch [:transact [{:db/id p-id :block/children children}]]})))\n\n\n(defn left-sidebar-drop-above\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar (if (< s-order t-order)\n                                                      (dec t-order)\n                                                      t-order)}\n        inc-or-dec (if (< s-order t-order) dec inc)\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between ?inc-or-dec\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(?inc-or-dec ?order) ?new-order]]\n                              @db/dsdb s-order (if (< s-order t-order)\n                                                 t-order\n                                                 (dec t-order))\n                              between inc-or-dec)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-above\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-above source-order target-order)]}))\n\n\n(defn left-sidebar-drop-below\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar t-order}\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(dec ?order) ?new-order]]\n                              @db/dsdb s-order (inc t-order) between)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-below\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-below source-order target-order)]}))\n\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}