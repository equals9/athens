{"version":3,"sources":["athens/devcards/parser.cljs"],"mappings":";;;;;;AAWA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAYL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAG;;AAAA,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAAE,AAAA,AAAA,AAEG,AAACY,AACC,AAAKC,AAAEC;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACSA,AAAIC,AAAwBD,AAAaD;AAClD3B;AALL,AAAA,AAAA,AAAAe,AAAAD;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAJ,AAAAE,AAAAC;;;AAAA,AAAAC,AAAAJ;;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAR;;;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAc,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAAAG,AAAA,AAAAhB;AAAA,AAAA,AAAAF,AAAAE;;;AAAAF;;AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["athens.devcards.parser/strings","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.parser","js/athens.devcards.parser.t_athens$devcards$parser60288","athens.devcards.parser/t_athens$devcards$parser60288","_60290","meta60289","cljs.core/PROTOCOL_SENTINEL","this__38808__auto__","devcard-opts__38809__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__38827__auto__","cljs.core/fn?","data-atom__38828__auto__","owner__38829__auto__","reagent.core/as-element","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.parser/->t_athens$devcards$parser60288","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","x","athens.devcards.blocks/block-el"],"sourcesContent":["(ns athens.devcards.parser\n  (:require\n    [athens.devcards.blocks :refer [block-el]]\n    #_[athens.parse-renderer :refer [parse-and-render]]\n    #_[athens.parser :refer [parse-to-ast combine-adjacent-strings]]\n    #_[cljs.test :refer [is testing are async]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [devcards.core :refer [#_defcard defcard-rg #_deftest]]))\n\n\n(def strings\n  [\"This is a plain block\"\n   \"This is a [[page link]]\"\n   \"This is a [[nested [[page link]]]]\"\n   \"This is a #hashtag\"\n   \"This is a #[[long hashtag]]\"\n   \"This is a block ref: ((lxMRAb5Y5))\"\n   \"This is a **very** important block\"\n   \"This is an [external link](https://github.com/athensresearch/athens/)\"\n   \"This is an image: ![alt](https://raw.githubusercontent.com/athensresearch/athens/master/doc/athens-puk-patrick-unsplash.jpg)\"])\n\n\n(defcard-rg Parse\n  [:<>\n   (map-indexed\n     (fn [i x]\n       ^{:key x} [block-el {:block/string x :block/uid i}])\n     strings)])\n"]}