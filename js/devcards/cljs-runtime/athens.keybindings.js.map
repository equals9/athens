{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__56089","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__56090","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__56093","_","athens.keybindings/block-end?","map__56096","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/handle-arrow-key","uid","state","map__56098","map__56099","cljs.core/deref","top-row?","bottom-row?","query","index","results","selected-items","G__56102","re-frame.core/subscribe","direction","line-height","js/window","js/parseInt","height","lines","js/Math.ceil","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","and__4174__auto__","cljs.core/seq","G__56105","re-frame.core/dispatch","G__56108","G__56109","G__56110","G__56111","G__56112","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/update","cljs.core/dec","athens.util/scroll-if-needed","js/document","cljs.core/inc","G__56113","G__56114","G__56115","G__56116","athens.keybindings/handle-tab","map__56117","block-zero?","athens.db/get-block","G__56119","G__56120","athens.keybindings/handle-escape","G__56121","athens.keybindings/handle-enter","map__56122","map__56123","page","block","map__56126","title","new-str","clojure.string/replace-first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","map__56128","first","new-tail","G__56130","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__56131","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__56133","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__56135","close-pair","js/setTimeout","G__56137","G__56138","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__56139","G__56140","G__56141","G__56142","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__56144","possible-pair","G__56146","p1__56143#","cljs.core/some","G__56147","G__56148","map__56149","athens.keybindings/is-character-key?","map__56151","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__56153","map__56154","new-query","goog.events.KeyCodes/SLASH","athens.db/search-in-block-content","athens.db/search-in-node-title","athens.keybindings/block-key-down","map__56157","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?       true\n        bottom-row?    true\n        {:search/keys [query index results]} @state\n        selected-items @(subscribe [:selected/items])\n        direction      (arrow-key-direction e)\n        line-height    (-> (.. js/window (getComputedStyle target) -lineHeight) js/parseInt)\n        height  (.. target -offsetHeight)\n        lines (-> (/ height line-height) js/Math.ceil)]\n    (prn \"ARROW\" line-height height lines)\n    ;;(prn selected-items (and shift direction))\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      ;; up and down should be handled by the dropdown menu if possible\n      query (cond\n              (= key-code KeyCodes.UP) (do\n                                         (.. e preventDefault)\n                                         (if (= index 0)\n                                           (swap! state assoc :search/index (dec (count results)))\n                                           (swap! state update :search/index dec))\n                                         (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                           (.getElementById js/document \"dropdown-menu\")))\n              (= key-code KeyCodes.DOWN) (do\n                                           (.. e preventDefault)\n                                           (if (= index (dec (count results)))\n                                             (swap! state assoc :search/index 0)\n                                             (swap! state update :search/index inc))\n                                           (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                             (.getElementById js/document \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:slash? @state) (swap! state assoc :slash? false)\n    (:search/page @state) (swap! state assoc :search/page false)\n    (:search/block @state) (swap! state assoc :search/block false)\n    :else (dispatch [:editing/uid nil])))\n\n\n;;(defn cycle-todo\n;;  [])\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results page block]} @state]\n    (.. e preventDefault)\n    (cond\n      ;; auto-complete link\n      page (let [{:keys [node/title]} (get results index)\n                 new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n             (swap! state merge {:atom-string  new-str\n                                 :search/query nil\n                                 :search/page  false}))\n      ;; auto-complete block ref\n      block (let [{:keys [block/uid]} (get results index)\n                  new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n              (prn \"NEW\" new-str)\n              (swap! state merge {:atom-string  new-str\n                                  :search/query nil\n                                  :search/block false}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/page true)\n        double-parens? (swap! state assoc :search/block true)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [page block query]} @state\n        new-query (str query key)]\n    (cond\n      ;; FIXME: must press slash twice to close\n      (= key-code KeyCodes.SLASH) (swap! state update :slash? not)\n\n      ;; when in-line search dropdown is open\n      block (let [results (db/search-in-block-content query)]\n              (swap! state assoc :search/query new-query)\n              (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      page (let [results (db/search-in-node-title query)]\n             (swap! state assoc :search/query new-query)\n             (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}