{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__55843","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__55844","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__55847","_","athens.keybindings/block-end?","map__55850","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/handle-arrow-key","uid","state","map__55852","map__55853","cljs.core/deref","top-row?","bottom-row?","query","index","results","selected-items","G__55856","re-frame.core/subscribe","direction","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","and__4174__auto__","cljs.core/seq","G__55859","re-frame.core/dispatch","G__55862","G__55863","G__55864","G__55865","G__55866","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/update","cljs.core/dec","cljs.core/inc","G__55867","G__55868","G__55869","G__55871","athens.keybindings/handle-tab","map__55873","block-zero?","athens.db/get-block","G__55876","G__55877","athens.keybindings/handle-enter","map__55878","map__55879","page","block","map__55882","title","new-str","clojure.string/replace-first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","map__55884","first","new-tail","G__55886","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__55887","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__55889","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__55891","close-pair","js/setTimeout","G__55893","G__55894","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__55895","G__55896","G__55897","G__55898","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__55900","possible-pair","G__55904","p1__55899#","cljs.core/some","G__55905","G__55906","map__55907","athens.keybindings/is-character-key?","map__55909","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__55911","map__55912","new-query","goog.events.KeyCodes/SLASH","athens.db/search-in-block-content","athens.db/search-in-node-title","athens.keybindings/block-key-down","map__55915","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [athens.db :as db]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [query index results]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (prn selected-items (and shift direction))\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      ;; up and down should be handled by the dropdown menu if possible\n      query (cond\n              (= key-code KeyCodes.UP) (do\n                                         (.. e preventDefault)\n                                         (if (= index 0)\n                                           (swap! state assoc :search/index (dec (count results)))\n                                           (swap! state update :search/index dec)))\n              (= key-code KeyCodes.DOWN) (do\n                                           (.. e preventDefault)\n                                           (if (= index (dec (count results)))\n                                             (swap! state assoc :search/index 0)\n                                             (swap! state update :search/index inc))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n;;(defn cycle-todo\n;;  [])\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results page block]} @state]\n    (.. e preventDefault)\n    (cond\n      ;; auto-complete link\n      page (let [{:keys [node/title]} (get results index)\n                 new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n             (swap! state merge {:atom-string  new-str\n                                 :search/query nil\n                                 :search/page  false}))\n      ;; auto-complete block ref\n      block (let [{:keys [block/uid]} (get results index)\n                  new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n              (prn \"NEW\" new-str)\n              (swap! state merge {:atom-string  new-str\n                                  :search/query nil\n                                  :search/block false}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/page true)\n        double-parens? (swap! state assoc :search/block true)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [page block query]} @state\n        new-query (str query key)]\n    (cond\n      ;; FIXME: must press slash twice to close\n      (= key-code KeyCodes.SLASH) (swap! state update :slash? not)\n\n      ;; when in-line search dropdown is open\n      block (let [results (db/search-in-block-content query)]\n              (swap! state assoc :search/query new-query)\n              (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      page (let [results (db/search-in-node-title query)]\n             (swap! state assoc :search/query new-query)\n             (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}