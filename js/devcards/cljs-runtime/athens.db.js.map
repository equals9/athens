{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/athens-url","athens.db/help-url","athens.db/ego-url","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","athens.db/attr-mappings","athens.db/ATTRS","cljs.core/set","cljs.core/keys","athens.db/walker","x","temp__5733__auto__","attr","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","G__33083","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","athens.db/parse-tuples","tuples","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p1__33084#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.edn/read-string","p1__33085#","cljs.core/cons","athens.db/str-to-db-tx","json-str","edn-data","js/JSON.parse","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","cljs.core/map?","clojure.walk/postwalk","athens.db/schema","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","posh.reagent/posh!","athens.db/e-by-av","a","v","cljs.core/deref","datascript.core.datoms.cljs$core$IFn$_invoke$arity$4","athens.db/rules","athens.db/sort-block-children","block","children","cljs.core/seq","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","athens.db/get-block-document","id","G__33086","G__33087","G__33088","posh.reagent/pull","athens.db/get-node-document","G__33089","G__33090","G__33091","athens.db/shape-parent-query","pull-results","b","res","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","athens.db/get-parents-recursively","G__33092","G__33093","G__33094","athens.db/get-block","G__33095","G__33096","G__33097","athens.db/get-parent","G__33098","G__33099","datascript.core/entity","athens.db/deepest-child-block","document","G__33100","G__33101","G__33102","ch","n","cljs.core/count","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.db/re-case-insensitive","query","cljs.core/re-pattern","athens.db/search-exact-node-title","G__33103","G__33104","G__33105","datascript.core/q","athens.db/search-in-node-title","G__33106","G__33107","G__33108","G__33109","athens.db/get-root-parent-node","athens.db/search-in-block-content","G__33111","G__33112","G__33113","p1__33110#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","athens.db/prev-sibling-uid","uid","G__33114","G__33115","G__33116","athens.db/prev-block-uid","parent","deepest-child-prev-sibling","athens.db/next-sibling-block","G__33122","G__33123","G__33124","athens.db/next-sibling-block-recursively","sib","or__4185__auto__","athens.db/next-block-uid","next-block-recursive","js/athens.db.history","athens.db/history","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","athens.db/history-limit","athens.db/drop-tail","xs","pred","acc","cljs.core/next","athens.db/trim-head","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","athens.db/find-prev","cljs.core/last","p1__33130#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__33132#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","datascript.core.listen_BANG_.cljs$core$IFn$_invoke$arity$3","tx-report","map__33134","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","db-before","db-after","and__4174__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","h","p1__33133#"],"sourcesContent":["(ns athens.db\n  (:require\n    [clojure.edn :as edn]\n    [clojure.walk :as walk]\n    [datascript.core :as d]\n    [posh.reagent :refer [posh! pull]]))\n\n\n;; -- Example Roam DBs ---------------------------------------------------\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;; -- re-frame -----------------------------------------------------------\n\n(defonce rfdb {:user                \"Socrates\"\n               :current-route       nil\n               :loading?            true\n               :alert               nil\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool/open        false\n               :left-sidebar/open   true\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               ;;:dragging-global     false\n               :daily-notes/items   []\n               :selected/items   []})\n\n\n;; -- JSON Parsing ----------------------------------------------------\n\n\n;; keys are native Roam attributes\n;; vals are attributes pulled from\n;; window.roamAlphaAPI.q(`[:find [?a ...] :where [_ ?a _]]`)\n(def attr-mappings\n  {:attrs/lookup       \"lookup\"\n   :block/children     \"children\"\n   :block/heading      \"heading\"\n   :block/open         \"open\"\n   :block/order        \"order\"\n   :block/props        \"props\"\n   :block/refs         \"refs\"\n   :block/string       \"string\"\n   :block/text-align   \"text-align\"\n   :block/uid          \"uid\"\n   :children/view-type \"view-type\"\n   :create/email       \"email\"\n   :create/time        \"time\"\n   ;; datascript id\n   :db/id              :db/id\n   :edit/email         \"email\"\n   :edit/seen-by       \"seen-by\"\n   :edit/time          \"time\"\n   :ent/emojis         \"emojis\"\n   :entity/attrs       \"attrs\"\n   :entity/image-url   \"image-url\"\n   :entity/title       \"title\"\n   :log/id             \"id\"\n   :node/title         \"title\"\n   :page/sidebar       \"sidebar\"\n   :user/color         \"color\"\n   :user/display-name  \"display-name\"\n   :user/email         \"email\"\n   :user/photo-url     \"photo-url\"\n   :user/settings      \"settings\"\n   :user/uid           \"uid\"\n   :vc/blocks          \"blocks\"\n   :window/filters     \"filters\"\n   :window/id          \"id\"})\n\n(def ATTRS (set (keys attr-mappings)))\n\n\n(defn walker\n  \"If value is a string, starts with \\\":\\\", and exists in\n  ATTRS set, then convert that value.\"\n  [x]\n  (if-let [attr (and (string? x)\n                     (= \":\" (first x))\n                     (ATTRS (keyword (subs x 1))))]\n    attr\n    x))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then to a valid datascript transaction (datoms or maps).\"\n  [json-str]\n  (let [edn-data (-> json-str js/JSON.parse js->clj)]\n    (if (map? (first edn-data))\n      (walk/postwalk walker edn-data)\n      (parse-tuples edn-data))))\n\n\n;; -- Datascript and Posh ------------------------------------------------\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defonce dsdb (d/create-conn schema))\n(posh! dsdb)\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(defn sort-block-children\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (vec (sort-by :block/order (map sort-block-children children))))\n    block))\n\n\n(defn get-block-document\n  [id]\n  (->> @(pull dsdb '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...} :edit/time] id)\n       sort-block-children))\n\n\n(defn get-node-document\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string :block/open :block/order {:block/children ...} :edit/time] id)\n       sort-block-children))\n\n\n(defn shape-parent-query\n  \"Normalize path from deeply nested block to root node.\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n\n(defn get-parents-recursively\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string {:block/_children ...}] id)\n       shape-parent-query))\n\n\n(defn get-block\n  [id]\n  @(pull dsdb '[:db/id :node/title :block/uid :block/order :block/string {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (-> (d/entity @dsdb id)\n      :block/_children\n      first\n      :db/id\n      get-block))\n\n\n(defn deepest-child-block\n  [id]\n  (let [document (->> @(pull dsdb '[:block/order :block/uid {:block/children ...}] id))]\n    (loop [block document]\n      (if (nil? (:block/children block))\n        block\n        (let [ch (:block/children block)\n              n  (count ch)]\n          (recur (get ch (dec n))))))))\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" query)))\n\n\n(defn search-exact-node-title\n  [query]\n  (d/q '[:find (pull ?node [:db/id :node/title :block/uid]) .\n         :in $ ?query\n         :where [?node :node/title ?query]]\n       @dsdb\n       query))\n\n\n(defn search-in-node-title\n  [query]\n  (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n         :in $ ?query-pattern ?query\n         :where\n         [?node :node/title ?title]\n         [(re-find ?query-pattern ?title)]\n         [(not= ?title ?query)]] ;; ignore exact match to avoid duplicate\n       @dsdb\n       (re-case-insensitive query)\n       query))\n\n\n(defn get-root-parent-node\n  [block]\n  (loop [b block]\n    (if (:node/title b)\n      (assoc block :block/parent b)\n      (recur (first (:block/_children b))))))\n\n\n(defn search-in-block-content\n  [query]\n  (->>\n    (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n           :in $ ?query-pattern\n           :where\n           [?block :block/string ?txt]\n           [(re-find ?query-pattern ?txt)]]\n         @dsdb\n         (re-case-insensitive query))\n    (map get-root-parent-node)\n    (mapv #(dissoc % :block/_children))))\n\n\n;; xxx 2 kinds of operations\n;; write operations, it's nice to have entire block and entire parent block to make TXes\n;; read operations (navigation), only need uids\n\n;; xxx these all assume all blocks are open. have to skip closed blocks\n;; TODO: focus AND set selection-start for :editing/uid\n\n(defn prev-sibling-uid\n  [uid]\n  (d/q '[:find ?sib-uid .\n         :in $ ?block-uid\n         :where\n         [?block :block/uid ?block-uid]\n         [?block :block/order ?block-o]\n         [?parent :block/children ?block]\n         [?parent :block/children ?sib]\n         [?sib :block/order ?sib-o]\n         [?sib :block/uid ?sib-uid]\n         [(dec ?block-o) ?prev-sib-o]\n         [(= ?sib-o ?prev-sib-o)]]\n       @dsdb uid))\n\n;; if order 0, go to parent\n;; if order n, go to prev siblings deepest child\n(defn prev-block-uid\n  [uid]\n  (let [block (get-block [:block/uid uid])\n        parent (get-parent [:block/uid uid])\n        deepest-child-prev-sibling (deepest-child-block [:block/uid (prev-sibling-uid uid)])]\n    (if (zero? (:block/order block))\n      (:block/uid parent)\n      (:block/uid deepest-child-prev-sibling))))\n\n\n(defn next-sibling-block\n  [uid]\n  (d/q '[:find (pull ?sib [*]) .\n         :in $ ?block-uid\n         :where\n         [?block :block/uid ?block-uid]\n         [?block :block/order ?block-o]\n         [?parent :block/children ?block]\n         [?parent :block/children ?sib]\n         [?sib :block/order ?sib-o]\n         [?sib :block/uid ?sib-uid]\n         [(inc ?block-o) ?prev-sib-o]\n         [(= ?sib-o ?prev-sib-o)]]\n       @dsdb uid))\n\n\n(defn next-sibling-block-recursively\n  [uid]\n  (loop [uid uid]\n    (let [sib (next-sibling-block uid)\n          parent (get-parent [:block/uid uid])]\n      (if (or sib (:node/title parent))\n        sib\n        (recur (:block/uid parent))))))\n\n;; if child, go to child 0\n;; else recursively find next sibling of parent\n(defn next-block-uid\n  [uid]\n  (let [block (->> (get-block [:block/uid uid])\n                   sort-block-children)\n        ch (:block/children block)\n        next-block-recursive (next-sibling-block-recursively uid)]\n    (cond\n      ch (:block/uid (first ch))\n      next-block-recursive (:block/uid next-block-recursive))))\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n"]}