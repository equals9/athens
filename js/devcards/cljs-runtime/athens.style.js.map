{"version":3,"sources":["athens/style.cljs"],"mappings":"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","names":["var_args","G__39022","athens.style/cssv","js/Error","variable","alpha","athens.style/COLORS","athens.style/THEME-LIGHT","athens.style/THEME-DARK","athens.style/HSL-COLORS","p1__39025#","p2__39026#","p3__39027#","cljs.core/reduce-kv","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","garden.color/hex->hsl","athens.style/DEPTH-SHADOWS","athens.style/OPACITIES","athens.style/ZINDICES","athens.style/return-color","c","athens.style/return-color-with-alpha","a","cljs.core/Keyword","garden.color/opacify","G__39031","athens.style/color","athens.style/base-styles","athens.style.cssv.cljs$core$IFn$_invoke$arity$1","athens.style/app-styles","stylefy.core/tag","athens.style/THEME","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","athens.style/THEME-DARK?","athens.style/kw-to-str","kw","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","athens.style/css-theme-map","theme","cljs.core.map.cljs$core$IFn$_invoke$arity$2","k","css-k","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","val","cljs.core/keys","cljs.core/flatten","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","athens.style/switch-theme!","new-theme","cljs.core/reset!","cljs.core/deref","athens.style/toggle-theme!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","G__39043","athens.style/cssv!","core-kw","core-kw-a","theme-kw","css-key","new-val","athens.style.color.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc"],"sourcesContent":["(ns athens.style\n  (:require\n    [garden.color :refer [opacify hex->hsl]]\n    [stylefy.core :as stylefy]))\n\n\n(defn cssv\n  ;; Helper for accessing CSS Custom Properties defined\n  ;; in the application's :root\n  ([variable]\n   ;; When the variable is alone, reformat it and pass it through\n   (str \"var(--\" variable \")\"))\n  ([variable alpha]\n   ;; 1. Create a new color with the requested alpha value\n   ;; 1a. If this is a new color add it to the :root, with a logical name like \"link-color-50\" for blue at 50% opacity\n   ;; 2. Return the custom property name of the new color\n   (str \"var(--\" variable \"-\" alpha \")\")))\n\n\n\n\n\n(def COLORS\n  {:link-color         \"#2399E7\"\n   :highlight-color    \"#FBBE63\"\n   :warning-color      \"#DE3C21\"\n   :confirmation-color \"#189E36\"\n   :header-text-color  \"#BABABA\"\n   :body-text-color    \"#AAA\"\n   :border-color       \"hsla(32, 81%, 90%, 0.08)\"\n   :background-minus-1 \"#151515\"\n   :background-minus-2 \"#111\"\n   :background-color   \"#1A1A1A\"\n   :background-plus-1  \"#222\"\n   :background-plus-2  \"#333\"})\n\n\n(def THEME-LIGHT\n  {:link-color         \"#0075E1\"\n   :highlight-color    \"#F9A132\"\n   :warning-color      \"#D20000\"\n   :confirmation-color \"#009E23\"\n   :header-text-color  \"#322F38\"\n   :body-text-color    \"#433F38\"\n   :border-color       \"hsla(32, 81%, 10%, 0.08)\"\n   :background-plus-2  \"#FFFFFF\"\n   :background-plus-1  \"#FFFFFF\"\n   :background-color   \"#FFFFFF\"\n   :background-minus-1 \"#FAF8F6\"\n   :background-minus-2 \"#EFEDEB\"})\n\n\n(def THEME-DARK\n  {:link-color         \"#2399E7\"\n   :highlight-color    \"#FBBE63\"\n   :warning-color      \"#DE3C21\"\n   :confirmation-color \"#189E36\"\n   :header-text-color  \"#BABABA\"\n   :body-text-color    \"#AAA\"\n   :border-color       \"hsla(32, 81%, 90%, 0.08)\"\n   :background-minus-1 \"#151515\"\n   :background-minus-2 \"#111\"\n   :background-color   \"#1A1A1A\"\n   :background-plus-1  \"#222\"\n   :background-plus-2  \"#333\"})\n\n\n(def HSL-COLORS\n  (reduce-kv #(assoc %1 %2 (hex->hsl %3)) {} COLORS))\n\n\n(def DEPTH-SHADOWS\n  {:4                  \"0px 1.6px 3.6px rgba(0, 0, 0, 0.13), 0px 0.3px 0.9px rgba(0, 0, 0, 0.1)\"\n   :8                  \"0px 3.2px 7.2px rgba(0, 0, 0, 0.13), 0px 0.6px 1.8px rgba(0, 0, 0, 0.1)\"\n   :16                 \"0px 6.4px 14.4px rgba(0, 0, 0, 0.13), 0px 1.2px 3.6px rgba(0, 0, 0, 0.1)\"\n   :64                 \"0px 24px 60px rgba(0, 0, 0, 0.15), 0px 5px 12px rgba(0, 0, 0, 0.1)\"})\n\n\n(def OPACITIES\n  {:opacity-lower  0.10\n   :opacity-low    0.25\n   :opacity-med    0.50\n   :opacity-high   0.75\n   :opacity-higher 0.85})\n\n\n;; Based on Bootstrap's excellent Z-index set\n(def ZINDICES\n  {:zindex-dropdown          1000\n   :zindex-sticky            1020\n   :zindex-fixed             1030\n   :zindex-modal-backdrop    1040\n   :zindex-modal             1050\n   :zindex-popover           1060\n   :zindex-tooltip           1070})\n\n\n;; Color\n;; Provide color keyword\n;; (optional) Provide alpha value, either keyword or 0-1\n\n(defn- return-color\n  [c]\n  (c COLORS))\n\n\n(defn- return-color-with-alpha\n  [c a]\n  (if (keyword? a)\n    (opacify (c HSL-COLORS) (a OPACITIES))\n    (opacify (c HSL-COLORS) a)))\n\n\n(defn color\n  ([c] (return-color c))\n  ([c a] (return-color-with-alpha c a)))\n\n\n;; Base Styles\n\n(def base-styles\n  {:background-color (cssv \"background-color\")\n   :font-family      \"IBM Plex Sans, Sans-Serif\"\n   :color            (cssv \"body-text-color\")\n   :font-size        \"16px\"\n   :line-height      \"1.5\"\n   ::stylefy/manual [[:a {:color (cssv \"link-color\")}]\n                     [:h1 :h2 :h3 :h4 :h5 :h6 {:margin \"0.2em 0\"\n                                               :line-height \"1.3\"\n                                               :color (cssv \"header-text-color\")}]\n                     [:h1 {:font-size \"3.125em\"\n                           :font-weight 600\n                           :letter-spacing \"-0.03em\"}]\n                     [:h2 {:font-size \"2.375em\"\n                           :font-weight 500\n                           :letter-spacing \"-0.03em\"}]\n                     [:h3 {:font-size \"1.75em\"\n                           :font-weight 500\n                           :letter-spacing \"-0.02em\"}]\n                     [:h4 {:font-size \"1.3125em\"}]\n                     [:h5 {:font-size \"0.75em\"\n                           :font-weight 500\n                           :line-height \"1rem\"\n                           :letter-spacing \"0.08em\"\n                           :text-transform \"uppercase\"}]\n                     [:.MuiSvgIcon-root {:font-size \"24px\"}]\n                     [:input {:font-family \"inherit\"}]\n                     [:img {:max-width \"100%\"\n                            :height \"auto\"}]]})\n\n\n(def app-styles\n  {:overflow \"hidden\"\n   :height   \"100vh\"\n   :width    \"100vw\"})\n\n\n(stylefy/tag \"html\" base-styles)\n\n\n(def THEME (atom THEME-LIGHT))\n(def THEME-DARK? (atom false))\n\n(defn kw-to-str\n  [kw]\n  (subs (str kw) 1))\n\n(defn css-theme-map\n  [theme]\n  (->> (map (fn [k]\n              (let [css-k (keyword (str \"--\" (kw-to-str k)))\n                    val   (k theme)]\n                [css-k val]))\n         (keys theme))\n    flatten\n    (apply hash-map)))\n\n\n(defn switch-theme!\n  [new-theme]\n  (reset! THEME new-theme)\n  (stylefy/tag \":root\" (css-theme-map @THEME)))\n\n\n(defn toggle-theme!\n  []\n  (if @THEME-DARK?\n    (switch-theme! THEME-LIGHT)\n    (switch-theme! THEME-DARK))\n  (swap! THEME-DARK? not))\n\n\n(stylefy/tag \":root\" (css-theme-map @THEME))\n\n\n\n;;::stylefy/media {{:prefers-color-scheme \"dark\"} {:--link-color         (:link-color THEME-DARK)\n;;                                                :--highlight-color    (:highlight-color THEME-DARK)\n;;                                                :--warning-color      (:warning-color THEME-DARK)\n;;                                                :--confirmation-color (:confirmation-color THEME-DARK)\n;;                                                :--header-text-color  (:header-text-color THEME-DARK)\n;;                                                :--body-text-color    (:body-text-color THEME-DARK)\n;;                                                :--border-color       (:border-color THEME-DARK)\n;;                                                :--background-minus-1 (:background-minus-1 THEME-DARK)\n;;                                                :--background-minus-2 (:background-minus-2 THEME-DARK)\n;;                                                :--background-color   (:background-color THEME-DARK)\n;;                                                :--background-plus-1  (:background-plus-1 THEME-DARK)\n;;                                                :--background-plus-2  (:background-plus-2 THEME-DARK)}}\n\n\n;; link-color\n;; background-color\n;; body-text-color\n\n(defn cssv!\n  ([kw]\n   (str \"var(--\" (kw-to-str kw) \")\"))\n  ([kw alpha]\n   (let [core-kw (kw-to-str kw)\n         core-kw-a (str core-kw \"-\" (* 100 alpha))\n         theme-kw (keyword core-kw-a)\n         css-key (str \"var(--\"  core-kw-a \")\")\n         new-val (color kw alpha)]\n        (swap! THEME assoc theme-kw new-val)\n        (switch-theme! @THEME)\n        css-key)))\n\n\n\n(stylefy/tag \"*\" {:box-sizing \"border-box\"})\n"]}