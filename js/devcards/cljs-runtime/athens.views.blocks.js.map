{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/bullet-style","G__58084","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__58085","garden.selectors/before","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/on-change","value","uid","G__58086","re-frame.core/dispatch","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__58087","cljs.core/not","p__58088","map__58089","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__58091","map__58092","athens.views.blocks/tooltip-el","order","dbid","state","map__58094","cljs.core/deref","dragging","tooltip","and__4174__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","p__58096","map__58097","athens.views.blocks/bullet-el","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","e","G__58099","G__58100","goog.dom.classlist/contains","_","p__58101","map__58102","athens.views.blocks/block-content-el","string","editing-uid","G__58104","re-frame.core/subscribe","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","related-container","G__58105","G__58106","goog.dom/getAncestorByClass","source-container","G__58107","G__58108","source-uid","parent-dragging","G__58109","G__58110","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__58111","komponentit.autosize/textarea","G__58112","G__58113","athens.keybindings/block-key-down","athens.parse-renderer/parse-and-render","cljs.core/empty?","athens.views.blocks/page-search-el","_block","query","results","clojure.string/blank?","athens.db/search-in-node-title","athens.views.dropdown/dropdown","iter__4582__auto__","s__58115","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__58117","cljs.core/chunk-buffer","i__58116","map__58118","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58114","cljs.core/chunk-rest","map__58120","cljs.core/first","cljs.core/cons","cljs.core/rest","title","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-el","block","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__58122","map__58123","drag-target","parent","athens.db/get-parent","last-child?","G__58126","G__58127","G__58128","G__58129","G__58130","G__58131","G__58132","athens.views.dropdown/slash-menu-component","s__58134","b__58136","i__58135","iter__58133","child","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.keybindings :refer [block-key-down]]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.views.dropdown :refer [slash-menu-component #_menu dropdown]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [garden.selectors :as selectors]\n    [goog.dom :refer [getAncestorByClass]]\n    [goog.dom.classlist :refer [contains]]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :border-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   :color (color :body-text-color 0.4)\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :body-text-color :opacity-low)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index 1\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color :opacity-low)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index 3\n   :width \"100%\"\n   ;;:animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                ;;:animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :background-minus-1)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :background-minus-1))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index 2}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    4\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color (color :background-plus-1)\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:background-color \"lightblue\"})\n\n\n;; Helpers\n\n(defn on-change\n  [value uid]\n  (dispatch [:transact [[:db/add [:block/uid uid] :block/string value]]]))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n                        {:class    (if open \"open\" \"closed\")\n                         :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n;; FIXME: fix flicker from on-mouse-enter on-mouse-leave\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id} state]\n  (let [{:keys [dragging tooltip]} @state]\n    (when (and tooltip (not dragging))\n      [:div (use-style tooltip-style\n                       {:class          \"tooltip\"\n                        :on-mouse-leave #(swap! state assoc :tooltip false)})\n       [:div [:b \"db/id\"] [:span dbid]]\n       [:div [:b \"uid\"] [:span uid]]\n       [:div [:b \"order\"] [:span order]]])))\n\n\n(defn bullet-el\n  [{:block/keys [uid children open]} state]\n  [:span (merge (use-style bullet-style\n                           {:class         [(when (and (seq children) (not open))\n                                              \"closed-with-children\")]\n                            :draggable     true\n                            :on-mouse-over #(swap! state assoc :tooltip true)\n                            :on-mouse-out  (fn [e]\n                                             (when-not (contains (.. e -relatedTarget) \"tooltip\")\n                                               (swap! state assoc :tooltip false)))\n                            :on-drag-end   (fn [_] (swap! state assoc :dragging false))\n                            :on-drag-start (fn [e]\n                                             (.. e stopPropagation)\n                                             (set! (.. e -dataTransfer -effectAllowed) \"move\")\n                                    ;;(prn \"UID\" uid)\n                                             (.. e -dataTransfer (setData \"text/plain\" uid))\n                                             (swap! state assoc :dragging true))}))])\n\n\n;; Actual string contents - two elements, one for reading and one for writing\n;; seems hacky, but so far no better way to click into the correct position with one conditional element\n(defn block-content-el\n  [{:block/keys [string uid children]} state]\n  (let [editing-uid @(subscribe [:editing/uid])]\n\n    (when (and (not (= editing-uid uid))\n               (< (count (:atom-string @state)) (count string)))\n      (swap! state assoc :atom-string string))\n\n    [:div (use-style block-content-style\n                     {:class         \"block-content\"\n                      :on-drag-enter (fn [e]\n                                       (.. e stopPropagation)\n                                       (swap! state assoc :drag-target :child))\n                      :on-drag-over  (fn [e]\n                                       (.. e preventDefault)\n                                       (.. e stopPropagation)\n                                       false)\n                      :on-drag-leave (fn [e]\n                                       (.. e stopPropagation)\n                                       (let [related-container (getAncestorByClass (.. e -relatedTarget) \"block-container\")\n                                             source-container  (getAncestorByClass (.. e -target) \"block-container\")]\n                                         (cond\n                                           (= related-container source-container) nil\n                                           :else (swap! state assoc :drag-target nil))))\n                      :on-drop       (fn [e]\n                                       (let [source-uid      (.. e -dataTransfer (getData \"text/plain\"))\n                                             parent-dragging (getAncestorByClass (.. e -target) \"dragging\")]\n                                         (.. e preventDefault)\n                                         (.. e stopPropagation)\n                                         (swap! state assoc :dragging false)\n                                         (swap! state assoc :drag-target nil)\n                                         (when (and (nil? parent-dragging) (not= source-uid uid))\n                                           (dispatch [:drop-bullet source-uid uid :child]))))})\n\n     [autosize/textarea {:value       (:atom-string @state)\n                         :class       [(when (= editing-uid uid) \"is-editing\") \"textarea\"]\n                         :auto-focus  true\n                         :id          (str \"editable-uid-\" uid)\n                         :on-change   (fn [_]\n                                        (when (not= string (:atom-string @state))\n                                          (db-on-change (:atom-string @state) uid)))\n                         :on-key-down (fn [e] (block-key-down e uid state))}]\n     [parse-and-render string]\n     ;; don't show drop indicator when dragging to its children\n     (when (and (empty? children) (not (:dragging @state)))\n       [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                           (when (= (:drag-target @state) :child) {:background-color \"red\"})))])]))\n\n;; flipped around\n\n(defn page-search-el\n  [_block state]\n  (when (:search/page @state)\n    (let [query   (:search/query @state)\n          results (when (not (clojure.string/blank? query))\n                    (db/search-in-node-title query))]\n      [dropdown {:style   {:position \"absolute\"\n                           :top      \"100%\"\n                           :left     \"-0.125em\"}\n                 :content (if (or (not query) (clojure.string/blank? query))\n                            [:div \"Start Typing!\"]\n                            (for [{:keys [node/title block/uid]} results]\n                              ^{:key uid}\n                              [:div {:on-click #(navigate-uid uid)} title]))}])))\n\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :search/page false\n                       :search/query nil\n                       :search/block false\n                       :dragging false\n                       :drag-target nil})]\n    (fn [block]\n      (let [{:block/keys [uid #_string open children order]} block\n            {dragging :dragging drag-target :drag-target} @state\n            parent (db/get-parent [:block/uid uid])\n            last-child? (= order (dec (count (:block/children parent))))]\n\n        ;; xxx: bad vibes - if not editing-uid, allow ratom to be appended by joining two blocks (deleting at start)\n\n        ;;(prn \"target\" uid drag-target)\n\n        [:<>\n\n         ;; should be (when dragging-global) but this causes react to void the original component, preventing on-drag-end from firing\n         ;; need surface to drag over. probably a better way to do this\n         ;; FIXME drop-area-indicator styles no longer work because using a div now and document structure has changed\n         (when true\n           [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                               (when (= drag-target :container) {:background-color \"blue\"})))])\n\n         [:div.block-container\n          (use-style (merge block-style (when dragging dragging-style))\n            ;; TODO: is it possible to make this show-tree-indicator a mergable -style map like above?\n                     {:class         [(when dragging \"dragging\")\n                                      (when (and (seq children) open) \"show-tree-indicator\")]\n                      :on-drag-enter (fn [e]\n                                       (.. e stopPropagation)\n                                       (swap! state assoc :drag-target :container))\n                      :on-drag-over  (fn [e]\n                                       (.. e preventDefault)\n                                       (.. e stopPropagation)\n                                       false)\n                      :on-drag-leave (fn [e]\n                                       (let [related-container (getAncestorByClass (.. e -relatedTarget) \"block-container\")\n                                             source-container  (getAncestorByClass (.. e -target) \"block-container\")]\n                                         (when-not (= related-container source-container)\n                                           (swap! state assoc :drag-target nil))))\n                      :on-drop       (fn [e]\n                                       (let [source-uid      (.. e -dataTransfer (getData \"text/plain\"))\n                                             parent-dragging (getAncestorByClass (.. e -target) \"dragging\")]\n                                         (.. e preventDefault)\n                                         (.. e stopPropagation)\n                                         (swap! state assoc :dragging false)\n                                         (swap! state assoc :drag-target nil)\n                                         (when (and (nil? parent-dragging) (not= source-uid uid))\n                                           (dispatch [:drop-bullet source-uid uid :sibling]))))})\n\n          [:div {:style {:display \"flex\"}}\n           [toggle-el block]\n           [bullet-el block state]\n           [tooltip-el block state]\n           [block-content-el block state]]\n\n          (when (:slash? @state)\n            [slash-menu-component {:style {:position \"absolute\" :top \"100%\" :left \"-0.125em\"}}])\n          [page-search-el block state]\n\n          ;; Children\n          ;; if last element and no children, allow drop\n          (when (and open (seq children))\n            (for [child children]\n              [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n               [block-el child]]))]\n\n         (when last-child?\n           [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                               (when (= drag-target :container) {:background-color \"green\"})))])]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}