{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.views.blocks/bullet-style","G__58035","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__58036","garden.selectors/before","G__58037","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drag-target-style","athens.views.blocks/drop-area-indicator","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/block-content-style","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/on-change","value","uid","G__58038","re-frame.core/dispatch","athens.views.blocks/db-on-change","goog.functions/debounce","goog.dom.classlist/toggle","id","open","G__58039","cljs.core/not","athens.views.blocks/on-key-down","e","state","key","key-code","shift","meta","ctrl","alt","target","start","goog.dom.selection/getStart","end","goog.dom.selection/getEnd","selection","goog.dom.selection/getText","string","cljs.core/deref","query","block-start?","block-end?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","top-row?","bottom-row?","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/UP","G__58040","goog.events.KeyCodes/LEFT","G__58041","goog.events.KeyCodes/DOWN","G__58042","goog.events.KeyCodes/RIGHT","G__58043","and__4174__auto__","goog.events.KeyCodes/TAB","G__58044","G__58045","goog.events.KeyCodes/ENTER","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__58046","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/BACKSPACE","new-tail","new-str","G__58047","js/setTimeout","G__58048","G__58049","goog.dom.selection/setCursorPosition","or__4185__auto__","goog.events.KeyCodes/SLASH","cljs.core/update","goog.events.KeyCodes/OPEN_SQUARE_BRACKET","surround-selection","G__58050","G__58051","goog.dom.selection/setStart","G__58052","G__58053","goog.dom.selection/setEnd","double-brackets?","G__58054","G__58055","goog.events.KeyCodes/NINE","goog.events.KeyCodes/A","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","goog.events.KeyCodes/isCharacterKey","p__58056","map__58057","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","G__58059","G__58060","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__58061","map__58062","athens.views.blocks/tooltip-el","order","dbid","athens.views.blocks/drag-bullet-start","cljs.core/merge","athens.views.blocks/drag-bullet","map__58064","initial-x","initial-y","client-x","client-y","current-x","current-y","athens.views.blocks/drag-bullet-end","_","athens.views.blocks/drag-start-handler","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__58066","athens.views.blocks/drag-end-handler","G__58067","athens.views.blocks/drag-enter-container","athens.views.blocks/a-new-handler","athens.views.blocks/drag-leave-container","athens.views.blocks/block-el","block","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__58068","map__58069","map__58070","editing-uid","G__58072","re-frame.core/subscribe","tooltip-uid","G__58073","dragging-global","G__58074","dragging","drag-target","dragging-uid","closest-uid","closest-kind","G__58076","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__58078","re-frame.core/dispatch-sync","komponentit.autosize/textarea","G__58079","G__58080","athens.parse-renderer/parse-and-render","athens.views.dropdown/slash-menu-component","results","clojure.string/blank?","athens.db/search-in-node-title","athens.views.dropdown/dropdown","iter__4582__auto__","s__58082","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__58084","cljs.core/chunk-buffer","i__58083","map__58085","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58081","cljs.core/chunk-rest","map__58087","cljs.core/first","cljs.core/cons","cljs.core/rest","title","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","s__58090","b__58092","i__58091","iter__58089","child","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.views.dropdown :refer [slash-menu-component #_menu dropdown]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str :refer [join #_replace]]\n    [garden.selectors :as selectors]\n    [goog.dom.selection :refer [setStart getStart setEnd getEnd #_setText getText setCursorPosition #_getEndPoints]]\n    [goog.dom.classlist :as classlist :refer [add remove toggle]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core  :refer [dispatch subscribe dispatch-sync]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :panel-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.closed-with-children {}]\n                     [:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drag-target-style\n  {:border \"1px solid red\"})\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color :opacity-low)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   ;;:animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                ;;:animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index \"10\"\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    2\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:background-color \"lightblue\"})\n\n\n\n;; Helpers\n\n(defn on-change\n  [value uid]\n  (dispatch [:transact [[:db/add [:block/uid uid] :block/string value]]]))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  \"The most important question in all of Athens:\n\n    Vim vs Emacs\"\n  [e uid state]\n  (let [key          (.. e -key)\n        key-code     (.. e -keyCode)\n        shift        (.. e -shiftKey)\n        meta         (.. e -metaKey)\n        ctrl         (.. e -ctrlKey)\n        alt          (.. e -altKey)\n        target       (.. e -target)\n        start        (getStart target)\n        end          (getEnd target)\n        selection    (getText target)\n        string       (:atom-string @state)\n        query        (:search/query @state)\n        block-start? (zero? start)\n        block-end?   (= start (count string))\n        top-row?     true                                   ;; TODO\n        bottom-row?  true                                   ;; TODO\n        head         (subs string 0 start)\n        tail         (subs string end)]\n\n    (cond\n\n      ;; -- Arrow Keys ---------------------------------------------------------\n      (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n      (and (= key-code KeyCodes.LEFT) block-start?) (dispatch [:left uid])\n      (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n      (and (= key-code KeyCodes.RIGHT) block-end?) (dispatch [:right uid])\n\n      ;; -- Tab ----------------------------------------------------------------\n      (and shift (= key-code KeyCodes.TAB)) (dispatch [:unindent uid])\n      (= key-code KeyCodes.TAB) (dispatch [:indent uid])\n\n      ;; -- Enter --------------------------------------------------------------\n\n      ;; shift-enter: add line break\n      (and shift (= key-code KeyCodes.ENTER))\n      (swap! state assoc :atom-string (str head \"\\n\" tail))\n\n      ;; enter: depends on context\n      (= key-code KeyCodes.ENTER) (do (.. e preventDefault)\n                                      (dispatch [:enter uid string start state]))\n\n      ;; -- Backspace ----------------------------------------------------------\n\n      ;; if selection, delete entire selection\n      (and (not= selection \"\") (= key-code KeyCodes.BACKSPACE))\n      (let [new-tail (subs string end)\n            new-str (str head new-tail)]\n        (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      (and meta (= key-code KeyCodes.BACKSPACE)) (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (and (= key-code KeyCodes.BACKSPACE) block-start? (= start end)) (dispatch [:backspace uid string])\n\n      ;; if within brackets, delete close bracket as well\n      (and (= key-code KeyCodes.BACKSPACE) (= \"[]\" (subs string (dec start) (inc start))))\n      (let [head (subs string 0 (dec start))\n            tail (subs string (inc start))\n            new-str (str head tail)]\n        (js/setTimeout #(setCursorPosition target (dec start)) 10)\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false))\n\n      ;; default backspace: delete a character\n      (= key-code KeyCodes.BACKSPACE) (let [head (subs string 0 (dec start))\n                                            new-str (str head tail)]\n                                        (when (or (:search/page @state) (:search/block @state))\n                                          (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n                                        (swap! state assoc :atom-string new-str))\n\n      ;; open slash commands\n      (and (= key-code KeyCodes.SLASH)) (swap! state update :slash? not)\n\n      ;; -- Open Bracket -------------------------------------------------------\n\n      ;; if selection, add brackets around selection\n      (and (not= \"\" selection) (= key-code KeyCodes.OPEN_SQUARE_BRACKET))\n      (let [surround-selection (str \"[\" selection \"]\")\n            new-str (str head surround-selection tail)]\n        (js/setTimeout (fn []\n                         (setStart target (inc start))\n                         (setEnd target (inc end)))\n                       10)\n        (swap! state assoc :atom-string new-str))\n\n      ;; default: auto-create close bracket\n      (= key-code KeyCodes.OPEN_SQUARE_BRACKET)\n      (let [new-str (str head \"[]\" tail)\n            double-brackets? (= \"[[]]\" (subs new-str (dec start) (+ start 3)))]\n        (js/setTimeout #(setCursorPosition target (inc start)) 10)\n        (swap! state assoc :atom-string new-str)\n        ;; if second bracket, open search\n        (when double-brackets?\n          (swap! state assoc :search/page true)))\n\n      ;; TODO: close bracket should not be created if open bracket already exists or user just made a link\n      ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n      ;; -- Parentheses --------------------------------------------------------\n\n      ;; xxx: why doesn't Closure have parens key codes?\n      (and shift (= key-code KeyCodes.NINE)) (swap! state update :search/block not)\n\n      ;; -- Hotkeys ------------------------------------------------------------\n\n      (and meta (= key-code KeyCodes.A))\n      (do\n        (setStart target 0)\n        (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (and meta (= key-code KeyCodes.Z)) nil\n\n      ;; TODO: cut\n      (and meta (= key-code KeyCodes.X)) nil\n\n      ;; TODO: paste. magical\n      (and meta (= key-code KeyCodes.V)) nil\n\n      ;; TODO: bold\n      (and meta (= key-code KeyCodes.B)) nil\n\n      ;; TODO: italicize\n      (and meta (= key-code KeyCodes.I)) nil\n\n      ;; -- Default: Add new character -----------------------------------------\n\n      (and (not meta) (not ctrl) (not alt) (isCharacterKey key-code))\n      (let [new-str (str head key tail)]\n        (when (or (:search/page @state) (:search/block @state))\n          (swap! state assoc :search/query (str (:search/query @state) key)))\n        (swap! state assoc :atom-string new-str)))))\n\n      ;;:else (prn \"non-event\" key key-code))))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n              {:class    (if open \"open\" \"closed\")\n               :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id}]\n  [:div (use-style tooltip-style {:class \"tooltip\"})\n   [:div [:b \"db/id\"] [:span dbid]]\n   [:div [:b \"uid\"] [:span uid]]\n   [:div [:b \"order\"] [:span order]]])\n\n\n(defn drag-bullet-start\n  [e state]\n  (swap! state merge @state {:bullet/active    true\n                             :bullet/initial-x (.. e -clientX)\n                             :bullet/initial-y (.. e -clientY)}))\n\n(defn drag-bullet\n  [e state]\n  (when (:bullet/active @state)\n    (let [{:bullet/keys [initial-x initial-y]} @state\n          client-x  (.. e -clientX)\n          client-y  (.. e -clientY)\n          current-x (- client-x initial-x)\n          current-y (- client-y initial-y)]\n      (.. e preventDefault)\n      (swap! state merge @state {:bullet/current-x current-x\n                                 :bullet/current-y current-y}))))\n\n(defn drag-bullet-end\n  [_ state]\n  (swap! state merge @state {:bullet/active    false\n                             :bullet/initial-x 0\n                             :bullet/initial-y 0\n                             :bullet/current-x 0\n                             :bullet/current-y 0}))\n\n\n(defn drag-start-handler\n  [e state]\n  ;;(.. e stopPropagation)\n  (prn \"START\")\n  (dispatch [:dragging-global/toggle])\n  (swap! state update :dragging not))\n\n(defn drag-end-handler\n  [e state]\n  ;;(.. e stopPropagation)\n  (prn \"END\")\n  (dispatch [:dragging-global/toggle])\n  (swap! state update :dragging not))\n\n(defn drag-enter-container\n  [e state value]\n  ;;(prn \"ENTER\")\n  (.. e stopPropagation)\n  (swap! state assoc :drag-target :container))\n\n(defn a-new-handler\n  [e state]\n  (prn \"NEW END\"))\n\n(defn drag-leave-container\n  [e state]\n  (.. e stopPropagation)\n  ;;(prn \"LEAVE\")\n  (swap! state assoc :drag-target nil))\n\n;;(defn drag-enter-contents\n;;  [e state value]\n;;  ;;(prn \"ENTER\")\n;;  (.. e stopPropagation)\n;;  (swap! state assoc :drag-target :contents))\n\n;;(defn drag-over-handler\n;;  [e]\n;;  (.. e preventDefault)\n;;  ;;(prn \"OVER\")\n;;  (set! (.. e -dataTransfer -dropEffect) \"move\"))\n\n\n;;(defn drag-leave-handler\n;;  [e state]\n;;  ;;(prn \"LEAVE\")\n;;  (swap! state update :drag-target not))\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :search/page false\n                       :search/query nil\n                       :search/block false\n                       :dragging false\n                       :drag-target false})]\n    (fn [block]\n      (let [{:block/keys [uid string open children]} block\n            editing-uid @(subscribe [:editing/uid])\n            tooltip-uid @(subscribe [:tooltip/uid])\n            dragging-global @(subscribe [:dragging-global])\n            {dragging :dragging\n             drag-target :drag-target} @state\n            {dragging-uid :uid\n             closest-uid  :closest/uid\n             closest-kind :closest/kind} @(subscribe [:drag-bullet])]\n\n        ;; xxx: bad vibes - if not editing-uid, allow ratom to be appended by joining two blocks (deleting at start)\n        (when (and (not (= editing-uid uid))\n                   (< (count (:atom-string @state)) (count string)))\n          (swap! state assoc :atom-string string))\n\n        [:<>\n\n         (when dragging-global\n           [:div.drag-n-drop (use-style\n                               (merge {:background-color \"black\"\n                                       :height \"2px\"}\n                                      (when (= drag-target :container) {:background-color \"red\"})))])\n\n\n         [:div (use-style (merge block-style\n                                 (when dragging dragging-style))\n                 {:class         [\"block-container\"\n                                  ;; TODO: is it possible to make this a conditional -style map you can merge like above?\n                                  (when (and (seq children) open) \"show-tree-indicator\")]\n                  :data-uid      uid\n                  ;;:on-drag-enter (fn [e] (drag-enter-container e state nil))\n                  ;;:on-drag-leave (fn [e] (drag-leave-container e state))\n                  :on-drag-start (fn [e] (prn \"START\")\n                                   (dispatch-sync [:dragging-global/toggle]))\n                                   ;;(swap! state update :dragging not))\n                  :on-drag-end   (fn [e]\n                                   (prn \"END\")\n                                   #_(a-new-handler e state))})\n                  ;;:on-drag-over  (fn [e] (drag-over-handler e))})\n\n\n          [:div {:style {:display \"flex\"}}\n\n           [toggle-el block]\n\n           ;;(prn \"UPDATE\" current-x current-y)\n           ;; Bullet\n           [:span (merge (use-style bullet-style\n                                    {:class [\"bullet\"\n                                             ;;(when active \"dragging\")\n                                             (when (and (seq children) (not open))\n                                               \"closed-with-children\")]\n                                     :draggable true\n                                     :data-uid uid}))]\n           ;;:on-mouse-down (fn [e] (drag-bullet-start e state))\n           ;;:on-mouse-move (fn [e] (drag-bullet e state))\n           ;;:on-mouse-up   (fn [e] (drag-bullet-end e state))})\n           ;;:on-click #(when (not= dragging-uid uid) (navigate-uid uid))})\n           ;;{:style {:transform (str \"translate(\" current-x \"px, \" current-y \"px)\")}})]\n\n           ;;;; Tooltip\n           ;;(when (and (= tooltip-uid uid) (not dragging-uid))\n           ;;  [tooltip-el block])\n\n\n           ;; Actual string contents - two elements, one for reading and one for writing\n           ;; seems hacky, but so far no better way to click into the correct position with one conditional element\n           [:div (use-style (merge block-content-style {:user-select (when dragging-uid \"none\")})\n                            {:class    \"block-contents\"\n                             ;;:on-drag-enter (fn [e] (drag-enter-handler e state :child))\n                             :data-uid uid})\n            [autosize/textarea {:value       (:atom-string @state)\n                                :class       (when (= editing-uid uid) \"is-editing\")\n                                :auto-focus  true\n                                :id          (str \"editable-uid-\" uid)\n                                :on-change (fn [_] (db-on-change (:atom-string @state) uid))\n                                :on-key-down (fn [e] (on-key-down e uid state))}]\n            [parse-and-render string]]]\n\n\n          ;; Slash menu\n          (when (:slash? @state)\n            [slash-menu-component {:style {:position \"absolute\"\n                                           :top \"100%\"\n                                           :left \"-0.125em\"}}])\n\n          ;; Page search menu\n          (when (:search/page @state)\n            (let [query (:search/query @state)\n                  results (when (not (str/blank? query))\n                            (db/search-in-node-title query))]\n              [dropdown {:style {:position \"absolute\"\n                                 :top \"100%\"\n                                 :left \"-0.125em\"}\n                         :content\n                         (if (not query)\n                           [:div \"Start Typing!\"]\n                           (for [{:keys [node/title block/uid]} results]\n                             ^{:key uid}\n                             [:div {:on-click #(navigate-uid uid)} title]))}]))\n\n          ;;(when dragging-global\n          ;;  [:div.drag-n-drop.child (use-style\n          ;;                            (merge {:height \"2px\"}\n          ;;                               (when (= drag-target :child) {:background-color \"red\"})))])\n\n\n          ;; Children\n          (when open\n            (for [child children]\n              [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n               [block-el child]]))]]))))\n\n          ;; TODO: block search. will be pretty much same as page search\n          ;;(when (:search/block @state)\n          ;;  [slash-menu-component])\n         ;;(when dragging-global\n         ;;  [:span.drag-n-drop (use-style drop-area-indicator)])]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}