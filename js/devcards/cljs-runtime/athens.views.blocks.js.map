{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.views.blocks/block-indicator-style","G__58027","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__58028","garden.selectors/before","G__58029","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/on-change","value","uid","G__58030","re-frame.core/dispatch","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__58031","cljs.core/not","athens.views.blocks/on-key-down","e","state","key","key-code","shift","meta","ctrl","alt","target","start","goog.dom.selection/getStart","end","goog.dom.selection/getEnd","selection","goog.dom.selection/getText","string","cljs.core/deref","query","block-start?","block-end?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","top-row?","bottom-row?","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/UP","G__58032","goog.events.KeyCodes/LEFT","G__58033","goog.events.KeyCodes/DOWN","G__58034","goog.events.KeyCodes/RIGHT","G__58035","and__4174__auto__","goog.events.KeyCodes/TAB","G__58036","G__58037","goog.events.KeyCodes/ENTER","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__58038","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/BACKSPACE","new-tail","new-str","G__58039","js/setTimeout","G__58040","G__58041","goog.dom.selection/setCursorPosition","or__4185__auto__","goog.events.KeyCodes/SLASH","cljs.core/update","goog.events.KeyCodes/OPEN_SQUARE_BRACKET","surround-selection","G__58042","G__58043","goog.dom.selection/setStart","G__58044","G__58045","goog.dom.selection/setEnd","double-brackets?","G__58046","G__58047","goog.events.KeyCodes/NINE","goog.events.KeyCodes/A","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","goog.events.KeyCodes/isCharacterKey","athens.views.blocks/block-el","block","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__58048","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__58049","order","children","dbid","open?","cljs.core/seq","closed?","editing-uid","G__58051","re-frame.core/subscribe","tooltip-uid","G__58052","x","y","dragging-uid","closest-uid","closest-kind","G__58053","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/dragging-style","clojure.string.join.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","komponentit.autosize/textarea","_","G__58055","G__58056","athens.parse-renderer/parse-and-render","iter__4582__auto__","s__58058","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__58060","cljs.core/chunk-buffer","i__58059","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58057","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","child","athens.views.dropdown/slash-menu-component","results","clojure.string/blank?","athens.db/search-in-node-title","athens.views.dropdown/dropdown","s__58062","b__58064","i__58063","map__58065","iter__58061","map__58067","title","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.views.dropdown :refer [slash-menu-component #_menu dropdown]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str :refer [join #_replace]]\n    [garden.selectors :as selectors]\n    [goog.dom.selection :refer [setStart getStart setEnd getEnd #_setText getText setCursorPosition #_getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :panel-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def block-indicator-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.open {}]\n                     [:&.closed {}]\n                     [:&.closed [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                  :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]\n                     [:&.selected {}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   :animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                :animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index \"1\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index \"10\"\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    2\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style)\n  ;;{:background-color \"lightblue\"})\n\n\n\n;; Helpers\n\n(defn on-change\n  [value uid]\n  (dispatch [:transact [[:db/add [:block/uid uid] :block/string value]]]))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  \"The most important question in all of Athens:\n\n    Vim vs Emacs\"\n  [e uid state]\n  (let [key          (.. e -key)\n        key-code     (.. e -keyCode)\n        shift        (.. e -shiftKey)\n        meta         (.. e -metaKey)\n        ctrl         (.. e -ctrlKey)\n        alt          (.. e -altKey)\n        target       (.. e -target)\n        start        (getStart target)\n        end          (getEnd target)\n        selection    (getText target)\n        string       (:atom-string @state)\n        query        (:search/query @state)\n        block-start? (zero? start)\n        block-end?   (= start (count string))\n        top-row?     true                                   ;; TODO\n        bottom-row?  true                                   ;; TODO\n        head         (subs string 0 start)\n        tail         (subs string end)]\n\n    (cond\n\n      ;; -- Arrow Keys ---------------------------------------------------------\n      (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n      (and (= key-code KeyCodes.LEFT) block-start?) (dispatch [:left uid])\n      (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n      (and (= key-code KeyCodes.RIGHT) block-end?) (dispatch [:right uid])\n\n      ;; -- Tab ----------------------------------------------------------------\n      (and shift (= key-code KeyCodes.TAB)) (dispatch [:unindent uid])\n      (= key-code KeyCodes.TAB) (dispatch [:indent uid])\n\n      ;; -- Enter --------------------------------------------------------------\n\n      ;; shift-enter: add line break\n      (and shift (= key-code KeyCodes.ENTER))\n      (swap! state assoc :atom-string (str head \"\\n\" tail))\n\n      ;; enter: depends on context\n      (= key-code KeyCodes.ENTER) (do (.. e preventDefault)\n                                      (dispatch [:enter uid string start state]))\n\n      ;; -- Backspace ----------------------------------------------------------\n\n      ;; if selection, delete entire selection\n      (and (not= selection \"\") (= key-code KeyCodes.BACKSPACE))\n      (let [new-tail (subs string end)\n            new-str (str head new-tail)]\n        (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      (and meta (= key-code KeyCodes.BACKSPACE)) (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (and (= key-code KeyCodes.BACKSPACE) block-start? (= start end)) (dispatch [:backspace uid string])\n\n      ;; if within brackets, delete close bracket as well\n      (and (= key-code KeyCodes.BACKSPACE) (= \"[]\" (subs string (dec start) (inc start))))\n      (let [head (subs string 0 (dec start))\n            tail (subs string (inc start))\n            new-str (str head tail)]\n        (js/setTimeout #(setCursorPosition target (dec start)) 10)\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false))\n\n      ;; default backspace: delete a character\n      (= key-code KeyCodes.BACKSPACE) (let [head (subs string 0 (dec start))\n                                            new-str (str head tail)]\n                                        (when (or (:search/page @state) (:search/block @state))\n                                          (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n                                        (swap! state assoc :atom-string new-str))\n\n      ;; open slash commands\n      (and (= key-code KeyCodes.SLASH)) (swap! state update :slash? not)\n\n      ;; -- Open Bracket -------------------------------------------------------\n\n      ;; if selection, add brackets around selection\n      (and (not= \"\" selection) (= key-code KeyCodes.OPEN_SQUARE_BRACKET))\n      (let [surround-selection (str \"[\" selection \"]\")\n            new-str (str head surround-selection tail)]\n        (js/setTimeout (fn []\n                         (setStart target (inc start))\n                         (setEnd target (inc end)))\n                       10)\n        (swap! state assoc :atom-string new-str))\n\n      ;; default: auto-create close bracket\n      (= key-code KeyCodes.OPEN_SQUARE_BRACKET)\n      (let [new-str (str head \"[]\" tail)\n            double-brackets? (= \"[[]]\" (subs new-str (dec start) (+ start 3)))]\n        (js/setTimeout #(setCursorPosition target (inc start)) 10)\n        (swap! state assoc :atom-string new-str)\n        ;; if second bracket, open search\n        (when double-brackets?\n          (swap! state assoc :search/page true)))\n\n      ;; TODO: close bracket should not be created if open bracket already exists or user just made a link\n      ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n      ;; -- Parentheses --------------------------------------------------------\n\n      ;; xxx: why doesn't Closure have parens key codes?\n      (and shift (= key-code KeyCodes.NINE)) (swap! state update :search/block not)\n\n      ;; -- Hotkeys ------------------------------------------------------------\n\n      (and meta (= key-code KeyCodes.A))\n      (do\n        (setStart target 0)\n        (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (and meta (= key-code KeyCodes.Z)) nil\n\n      ;; TODO: cut\n      (and meta (= key-code KeyCodes.X)) nil\n\n      ;; TODO: paste. magical\n      (and meta (= key-code KeyCodes.V)) nil\n\n      ;; TODO: bold\n      (and meta (= key-code KeyCodes.B)) nil\n\n      ;; TODO: italicize\n      (and meta (= key-code KeyCodes.I)) nil\n\n      ;; -- Default: Add new character -----------------------------------------\n\n      (and (not meta) (not ctrl) (not alt) (isCharacterKey key-code))\n      (let [new-str (str head key tail)]\n        (when (or (:search/page @state) (:search/block @state))\n          (swap! state assoc :search/query (str (:search/query @state) key)))\n        (swap! state assoc :atom-string new-str)))))\n\n      ;;:else (prn \"non-event\" key key-code))))\n\n\n;;; Components\n\n\n ;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :search/page false\n                       :search/query nil\n                       :search/block false})]\n    (fn [block]\n      (let [{:block/keys [uid string open order children] dbid :db/id} block\n            open?       (and (seq children) open)\n            closed?     (and (seq children) (not open))\n            editing-uid @(subscribe [:editing/uid])\n            tooltip-uid @(subscribe [:tooltip/uid])\n            {:keys        [x y]\n             dragging-uid :uid\n             closest-uid  :closest/uid\n             closest-kind :closest/kind} @(subscribe [:drag-bullet])]\n\n        ;; xxx: bad vibes - if not editing-uid, allow ratom to be appended by joining two blocks (deleting at start)\n        (when (and (not (= editing-uid uid))\n                   (< (count (:atom-string @state)) (count string)))\n          (swap! state assoc :atom-string string))\n\n        [:div (use-style (merge block-style\n                                (when (= dragging-uid uid) dragging-style))\n                         {:class    (join \" \" [\"block-container\"\n                                               (when (= dragging-uid uid) \"dragging\")\n                                               (when (and (seq children) open) \"show-tree-indicator\")])\n                          :data-uid uid})\n         [:div {:style {:display \"flex\"}}\n\n          ;; Toggle\n          (if (seq children)\n            [:button (use-style block-disclosure-toggle-style\n                                {:class    (cond open? \"open\" closed? \"closed\")\n                                 :on-click #(toggle [:block/uid uid] open)})\n             [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n            [:span (use-style block-disclosure-toggle-style)])\n\n          ;; Bullet\n          (if (= dragging-uid uid)\n            [:span (merge (use-style block-indicator-style\n                                     {:class    (join \" \" [\"bullet\" \"dragging\" (if closed? \"closed\" \"open\")])\n                                      :data-uid uid})\n                          {:style {:transform (str \"translate(\" x \"px, \" y \"px)\")}})]\n\n            [:span (use-style block-indicator-style\n                              {:class    (str \"bullet \" (if closed? \"closed\" \"open\"))\n                               :data-uid uid\n                               :on-click #(navigate-uid uid)})])\n\n          ;; Tooltip\n          (when (and (= tooltip-uid uid)\n                     (not dragging-uid))\n            [:div (use-style tooltip-style {:class \"tooltip\"})\n             [:div [:b \"db/id\"] [:span dbid]]\n             [:div [:b \"uid\"] [:span uid]]\n             [:div [:b \"order\"] [:span order]]])\n\n          ;; Actual string contents - two elements, one for reading and one for writing\n          ;; seems hacky, but so far no better way to click into the correct position with one conditional element\n          [:div (use-style (merge block-content-style {:user-select (when dragging-uid \"none\")})\n                           {:class    \"block-contents\"\n                            :data-uid uid})\n           [autosize/textarea {:value       (:atom-string @state)\n                               :class       (when (= editing-uid uid) \"is-editing\")\n                               :auto-focus  true\n                               :id          (str \"editable-uid-\" uid)\n                               :on-change (fn [_] (db-on-change (:atom-string @state) uid))\n                               :on-key-down (fn [e] (on-key-down e uid state))}]\n           [parse-and-render string]\n\n           ;; Drop Indicator\n           (when (and (= closest-uid uid)\n                      (= closest-kind :child))\n             [:span (use-style drop-area-indicator)])]]\n\n         ;; Children\n         (when open?\n           (for [child children]\n             [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n              [block-el child]]))\n\n         (when (:slash? @state)\n           [slash-menu-component])\n\n         (when (:search/page @state)\n           (let [query (:search/query @state)\n                 results (when (not (str/blank? query))\n                           (db/search-in-node-title query))]\n             [dropdown {:content\n                        (if (not query)\n                          [:div \"Start Typing!\"]\n                          (for [{:keys [node/title block/uid]} results]\n                            ^{:key uid}\n                            [:div {:on-click #(navigate-uid uid)} title]))}]))\n\n         ;; TODO: block search. will be pretty much same as page search\n         ;;(when (:search/block @state)\n         ;;  [slash-menu-component])\n\n         ;; Drop Indicator\n         (when (and (= closest-uid uid) (= closest-kind :sibling))\n           [:span (use-style drop-area-indicator)])]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}