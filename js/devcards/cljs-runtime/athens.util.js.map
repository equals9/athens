{"version":3,"sources":["athens/util.cljc"],"mappings":";;;;;AAOA,AAAA,AAAMA;AAAN,AAEE,AAAA,AAACC,AAAK,AAAK,AAACC;;AAGd,AAAA,AAAMC;AAAN,AAEE,AAAI,AAAAC;;AAGN,AAAKC,AAAU,AAAA,AAACC;AAGhB,AAAKC,AAAa,AAAA,AAACD;AAGnB,AAAA,AAAME,AACHC;AADH,AAEE,AAAI,AAAA,AAAGA;AAAP,AAAA,AAAA;;AAEE,AAAM,AAAAL,AAAUK,AAAIC;AAAAA,AAClB,AAACC,AAAUD;AADOA,AAElB,AAACE,AAAYF;AAFKA,AAGlB,AAACG,AAAS,AAAA,AAACP,AAAoCI;AAH7BA,AAIlB,AAAA,AAAA,AAACI,AAAYJ;AAJf,AAKE,AAAA,AAAA,AAACI,AAAYJ;;;AAGnB,AAAA;;;AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEM,AAAA,AAACE;;;AAFP,AAAA,AAAA,AAAMF,AAGFG;AAHJ,AAIG,AAAMC,AAAI,AAACC,AACC,AAACC,AACD,AAAA,AAACC,AAAeJ;AAF5B,AAAA,AAAA,AAAA,AAGU,AAACP,AAASR,AAAUgB,AACpB,AAACR,AAASN,AAAac;;;AARpC,AAAA,AAAA,AAAMJ;;AAAN","names":["athens.util/gen-block-uid","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/random-uuid","athens.util/now-ts","js/Date","athens.util/US-format","tick.alpha.api.formatter.cljs$core$IFn$_invoke$arity$1","athens.util/title-format","athens.util/date-string","ts","x","tick.alpha.api.instant.cljs$core$IFn$_invoke$arity$1","tick.alpha.api.date_time.cljs$core$IFn$_invoke$arity$1","tick.alpha.api.format.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","var_args","G__55709","athens.util/get-day","js/Error","athens.util.get_day.cljs$core$IFn$_invoke$arity$1","offset","day","tick.alpha.api._.cljs$core$IFn$_invoke$arity$variadic","tick.alpha.api.date_time.cljs$core$IFn$_invoke$arity$0","tick.alpha.api/new-duration"],"sourcesContent":["(ns athens.util\n  (:require\n    [clojure.string :as str]\n    [tick.alpha.api :as t]\n    [tick.locale-en-us]))\n\n\n(defn gen-block-uid\n  []\n  (subs (str (random-uuid)) 27))\n\n\n(defn now-ts\n  []\n  (-> (js/Date.) .getTime))\n\n\n(def US-format (t/formatter \"MM-dd-yyyy\"))\n\n\n(def title-format (t/formatter \"LLLL dd, yyyy\"))\n\n\n(defn date-string\n  [ts]\n  (if (< ts 1) ;; TODO why this predicate?\n    [:span \"(unknown date)\"]\n    (as-> (js/Date. ts) x\n      (t/instant x)\n      (t/date-time x)\n      (t/format (t/formatter \"LLLL MM, yyyy h':'ma\") x)\n      (str/replace x #\"AM\" \"am\")\n      (str/replace x #\"PM\" \"pm\"))))\n\n\n(defn get-day\n  \"Returns today's date or a date OFFSET days before today\"\n  ([] (get-day 0))\n  ([offset]\n   (let [day (t/-\n               (t/date-time)\n               (t/new-duration offset :days))]\n     {:uid   (t/format US-format day)\n      :title (t/format title-format day)})))\n\n"]}