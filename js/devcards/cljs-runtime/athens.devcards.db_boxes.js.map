{"version":3,"sources":["athens/devcards/db_boxes.cljs"],"mappings":"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","names":["athens.devcards.db-boxes/key-code->key","devcards.core/register-card","devcards.core/card-base","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","athens.devcards.db-boxes/initial-box","js/athens","js/athens.devcards","js/athens.devcards.db-boxes","js/athens.devcards.db-boxes.box-state*","athens.devcards.db-boxes/box-state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__59889","map__59890","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/eval-box","str-content","box","vec__59892","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","bindings","athens.db/dsdb","datascript.core/q","datascript.core/pull","datascript.core/pull-many","ok?","result","e59895","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","js/Error","e","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","athens.devcards.db-boxes/eval-box!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/update-box!","s","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.devcards.db-boxes/update-and-eval-box!","p1__59896#","athens.devcards.db-boxes/increase-limit!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/+","athens.devcards.db-boxes/load-real-db!","conn","c__34273__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__34274__auto__","switch__34206__auto__","state_59936","state_val_59937","statearr-59938","inst_59898","inst_59899","inst_59900","cljs.core/PersistentHashMap","inst_59901","cljs.core.async.impl.ioc-helpers/take!","statearr-59939","inst_59932","statearr-59940","statearr-59941","inst_59903","inst_59908","inst_59909","inst_59910","inst_59911","inst_59912","statearr-59942","statearr-59943","inst_59926","inst_59928","inst_59929","inst_59930","statearr-59944","statearr-59945","inst_59905","inst_59906","statearr-59946","statearr-59947","statearr-59948","inst_59924","inst_59925","statearr-59949","statearr-59950","statearr-59951","inst_59921","statearr-59952","inst_59919","statearr-59953","statearr-59954","inst_59934","cljs.core.async.impl.ioc-helpers/return-chan","statearr-59955","inst_59916","statearr-59956","statearr-59957","state-machine__34207__auto__","ret-value__34208__auto__","result__34209__auto__","cljs.core/keyword-identical?","e59958","js/Object","ex__34210__auto__","statearr-59959","cljs.core.async.impl.ioc-helpers/process-exception","state__34275__auto__","statearr-59960","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic","athens.db/athens-url","datascript.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2","athens.db/str-to-db-tx","js/alert","athens.devcards.db-boxes/load-real-db-button","pressed?","handler","cljs.core/deref","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes59961","athens.devcards.db-boxes/t_athens$devcards$db_boxes59961","_59963","meta59962","this__38815__auto__","devcard-opts__38816__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__38834__auto__","cljs.core/fn?","data-atom__38835__auto__","owner__38836__auto__","reagent.core/as-element","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.db-boxes/->t_athens$devcards$db_boxes59961","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes59964","athens.devcards.db-boxes/t_athens$devcards$db_boxes59964","_59966","meta59965","athens.devcards.db-boxes/->t_athens$devcards$db_boxes59964","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.db-boxes/attr-unique?","attr","cljs.core/contains?","athens.db/schema","athens.devcards.db-boxes/attr-many?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/attr-ref?","athens.devcards.db-boxes/attr-reverse?","cljs.core/Keyword","clojure.string/starts-with?","cljs.core/name","athens.devcards.db-boxes/headings","data","mode","G__59967","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/max","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keys","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","athens.devcards.db-boxes/coll-rows","coll","row","p__59968","vec__59969","idx","value","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","athens.devcards.db-boxes/reverse-refs-for-attr","eid","G__59972","G__59973","G__59974","G__59975","athens.devcards.db-boxes/reverse-attr","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/namespace","athens.devcards.db-boxes/wrap-with-db-id","athens.devcards.db-boxes/reverse-refs","ref-attrs","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__59977","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__59979","cljs.core/chunk-buffer","i__59978","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59976","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p__59980","map__59981","id","athens.devcards.db-boxes/reverse-rows","athens.devcards.db-boxes/map-rows","m","p__59983","vec__59984","k","v","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/tuple-rows","tuples","p__59987","vec__59988","values","heading","athens.devcards.db-boxes/maps-rows","ms","hs","s__59992","b__59994","i__59993","iter__59991","s__59996","b__59998","i__59997","iter__59995","s__60000","b__60002","i__60001","iter__59999","h","athens.devcards.db-boxes/get-rows","G__60003","var_args","G__60005","athens.devcards.db-boxes/pull-entity-str","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__60006","map__60007","athens.devcards.db-boxes/cell","athens.devcards.db_boxes.pull_entity_str.cljs$core$IFn$_invoke$arity$1","or__4185__auto__","athens.devcards.db_boxes.pull_entity_str.cljs$core$IFn$_invoke$arity$2","s__60010","b__60012","i__60011","iter__60009","G__60013","G__60014","s__60016","b__60018","i__60017","iter__60015","G__60019","G__60020","s__60022","b__60024","i__60023","iter__60021","G__60025","G__60026","athens.devcards.db-boxes/table-style","athens.style/COLORS","garden.color/opacify","athens.style/HSL-COLORS","athens.devcards.db-boxes/footer-style","athens.devcards.db-boxes/table-view","limit","rows","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","s__60028","b__60030","i__60029","iter__60027","s__60032","b__60034","i__60033","iter__60031","cljs.core.take.cljs$core$IFn$_invoke$arity$2","s__60036","b__60038","i__60037","map__60039","iter__60035","map__60041","s__60044","b__60046","i__60045","map__60047","iter__60043","map__60049","c","athens.devcards.db-boxes/coll-of-maps?","x","cljs.core/coll?","cljs.core/every?","cljs.core/map?","athens.devcards.db-boxes/tuples?","athens.devcards.db-boxes/browser-component","athens.devcards.db-boxes/error-component","error","athens.devcards.db-boxes/handle-box-change!","athens.devcards.db-boxes/handle-return-key!","athens.devcards.db-boxes/insert-tab","pos","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/handle-tab-key!","t","athens.devcards.db-boxes/handle-box-key-down!","key-code","shift?","G__60051","athens.devcards.db-boxes/box-component","box-state","_","map__60052","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes60054","athens.devcards.db-boxes/t_athens$devcards$db_boxes60054","_60056","meta60055","athens.devcards.db-boxes/->t_athens$devcards$db_boxes60054","cljs.core/reset!","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes60057","athens.devcards.db-boxes/t_athens$devcards$db_boxes60057","_60059","meta60058","athens.devcards.db-boxes/->t_athens$devcards$db_boxes60057","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.db-boxes\n  (:require\n    [athens.db :as db]\n    [athens.style :refer [COLORS HSL-COLORS]]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [<!]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\n    [garden.color :refer [opacify]]\n    [garden.core :refer [css]]\n    [reagent.core :as r]\n    [sci.core :as sci]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:require-macros\n    [cljs.core.async.macros :refer [go]]))\n\n\n(def key-code->key\n  {8   :backspace\n   9   :tab\n   13  :return})\n\n\n(defcard \"\n  # An experiment in browsing the datascript database\n\n  You can use these devcards to explore the Athens datascript database.\n\n  Initial data:\n  - Start by loading initial data with the \\\"Load Real Data\\\" button.\n  - This will load some sample datoms from the ego.datoms file\n\n  Executing queries:\n  - The browse-box uses [sci](https://github.com/borkdude/sci) to execute datascript queries.\n  - In addition to the (non-side-effecting) clojure.core functions, the following bindings are available:\n  - `athens/db` -> the datascript connection, dereference (`@`) to get the current database value\n  - `d/q` -> for querying the database\n  - `d/pull` -> pull one or more attributes of an entity, returns a map\n  - `d/pull-many` -> like `d/pull`, but pulls many entities at once\n  - Execute the query by pressing `shift-enter`\n\n  Browsing:\n  - The browser is a simple html table translating the query result into rows and cells.\n  - Browsing is possible if you've used a pull expression (in a query or with `d/pull` or `d/pull-many`).\n  - If you click a link, it will generate a new query and evaluate it.\n\n  History:\n  - Devcards keeps a history for us. Use the arrows at the bottom to navigate back to earlier states.\n\n  Possible improvements:\n  - Right now navigation is only possible by using a pull expression. By analysing queries it might also be possible for all other queries.\n  - No transctions are currently allowed, but this can easily be changed by adding `d/transact` to sci's bindings.\n  - There is absolutely no styling, some minimal styling would probably make reading the table easier.\n  \")\n\n\n(def initial-box\n  {:str-content\n   \"(d/q '[:find [(pull ?e [*]) ...]\n       :where [?e :node/title]]\n    @athens/db)\"\n   :limit 10})\n\n\n(defonce box-state*\n  (r/atom initial-box))\n\n\n(defn eval-box\n  [{:keys [str-content] :as box}]\n  (let [bindings {'athens/db db/dsdb\n                  'd/q d/q\n                  'd/pull d/pull\n                  'd/pull-many d/pull-many}\n        [ok? result] (try\n                       [true (sci/eval-string str-content {:bindings bindings})]\n                       (catch js/Error e [false e]))]\n    (-> box\n        (assoc :result result)\n        (assoc :error (not ok?)))))\n\n\n(defn eval-box!\n  []\n  (swap! box-state* eval-box))\n\n\n(defn update-box!\n  [s]\n  (swap! box-state* assoc :str-content s))\n\n\n(defn update-and-eval-box!\n  [s]\n  (swap! box-state*\n         #(-> %\n              (assoc :str-content s)\n              (eval-box))))\n\n\n(defn increase-limit!\n  []\n  (swap! box-state* update :limit + 10))\n\n\n(defn load-real-db!\n  [conn]\n  (go\n    (let [res (<! (http/get db/athens-url {:with-credentials? false}))\n          {:keys [success body]} res]\n      (if success\n        (do (d/transact! conn (db/str-to-db-tx body))\n            (swap! box-state* eval-box))\n        (js/alert \"Failed to retrieve data from GitHub\")))))\n\n\n(defn load-real-db-button\n  [conn]\n  (let [pressed? (r/atom false)\n        handler (fn []\n                  (swap! pressed? not)\n                  (load-real-db! conn))]\n    (fn []\n      [:button.primary {:disabled @pressed? :on-click handler} \"Load Real Data\"])))\n\n\n(defcard-rg Load-Real-DB\n  \"Downloads the ego db. Takes a few seconds.\"\n  [load-real-db-button db/dsdb])\n\n\n(defcard-rg Modify-Devcards\n  \"Increase width to 90% for table\"\n  [:style (css [:.com-rigsomelight-devcards-container {:width \"90%\"}]\n               [:.com-rigsomelight-devcards_rendered-card {:display \"flex\";\n                                                           :flex-direction \"column-reverse\"}])]);\n\n\n\n(defn attr-unique?\n  [attr]\n  (contains? (get db/schema attr) :db/unique))\n\n\n(defn attr-many?\n  [attr]\n  (= (get-in db/schema [attr :db/cardinality])\n     :db.cardinality/many))\n\n\n(defn attr-ref?\n  [attr]\n  (= (get-in db/schema [attr :db/valueType])\n     :db.type/ref))\n\n\n(defn attr-reverse?\n  [attr]\n  (when (keyword? attr)\n    (str/starts-with? (name attr) \"_\")))\n\n\n(defn headings\n  [data mode]\n  (case mode\n    :coll [\"idx\" \"val\"]\n    :map [\"key\" \"val\"]\n    :tuples (into [\"idx\"] (->> data\n                               (map count)\n                               (apply max)\n                               range))\n    :maps (into [\"idx\"] (->> data\n                             (mapcat keys)\n                             (distinct)))))\n\n\n(defn coll-rows\n  [coll]\n  (let [row (fn [[idx value]]\n              [{:value idx\n                :heading \"idx\"\n                :idx idx}\n               {:value value\n                :heading \"val\"\n                :idx idx}])]\n    (->> coll\n         (map-indexed vector)\n         (map row))))\n\n\n(defn reverse-refs-for-attr\n  [attr eid]\n  (d/q '[:find [?parent ...]\n         :in $ ?attr ?eid\n         :where [?parent :block/children ?eid]]\n       @db/dsdb attr eid))\n\n\n(defn reverse-attr\n  [attr]\n  (keyword (str (namespace attr) \"/_\" (name attr))))\n\n\n(defn wrap-with-db-id\n  [eid]\n  {:db/id eid})\n\n\n(defn reverse-refs\n  [eid]\n  (let [ref-attrs (->> db/schema\n                       keys\n                       (filter attr-ref?))]\n    (into {}\n          (for [attr ref-attrs]\n            [(reverse-attr attr)\n             (map wrap-with-db-id (reverse-refs-for-attr attr eid))]))))\n\n\n(defn reverse-rows\n  [{:keys [:db/id]}]\n  (when id\n    (reverse-refs id)))\n\n\n(defn map-rows\n  [m]\n  (let [row (fn [[k v]]\n              [{:value k\n                :heading \"key\"\n                :idx k}\n               {:value v\n                :attr k\n                :heading \"val\"\n                :idx k}])]\n    (concat (map row m)\n            (map row (reverse-rows m)))))\n\n\n; still not very clean\n(defn tuple-rows\n  [tuples]\n  (let [row (fn [[idx values]]\n              (into\n                [{:value idx\n                  :heading \"idx\"\n                  :idx idx}]\n                (map-indexed\n                  (fn [heading value]\n                    {:value value\n                     :heading (str heading)\n                     :idx idx})\n                  values)))]\n    (->> tuples\n         (map-indexed vector)\n         (map row))))\n\n\n(defn maps-rows\n  [ms]\n  (let [hs (headings ms :maps)]\n    (for [idx (-> ms count range)]\n      (into [{:value idx\n              :heading \"idx\"\n              :idx idx}]\n            (for [h (rest hs)]\n              {:value (get-in ms [idx h])\n               :attr h\n               :heading (str h)\n               :idx idx})))))\n\n\n(defn get-rows\n  [data mode]\n  (case mode\n    :coll (coll-rows data)\n    :map (map-rows data)\n    :tuples (tuple-rows data)\n    :maps (maps-rows data)))\n\n\n(defn pull-entity-str\n  ([id]\n   (str \"(d/pull @athens/db '[*] \" id \")\"))\n  ([attr id]\n   (str \"(d/pull @athens/db '[*] [\" attr \" \" (pr-str id) \"])\")))\n\n\n(defn cell\n  [{:keys [value attr id]}]\n  (if value\n    (cond\n      (= :db/id attr)\n      [:a {:on-click #(update-and-eval-box! (pull-entity-str (or id value)))\n           :style {:cursor :pointer}}\n       (str value)]\n\n      (attr-unique? attr)\n      [:a {:on-click #(update-and-eval-box! (pull-entity-str attr value))\n           :style {:cursor :pointer}}\n       (str value)]\n\n      (and (attr-many? attr)\n           (attr-ref? attr))\n      [:ul (for [v value]\n             ^{:key v}\n             [:li (cell {:value v\n                         :attr :db/id\n                         :id (:db/id v)})])]\n\n      (attr-reverse? attr)\n      [:ul (for [v value]\n             ^{:key v}\n             [:li (cell {:value v\n                         :attr :db/id\n                         :id (:db/id v)})])]\n\n      (attr-many? attr)\n      [:ul (for [v value]\n             ^{:key v}\n             [:li (cell {:value v})])]\n\n      :else\n      (str value))\n    \"\"))\n\n\n(def table-style\n  {:border-collapse \"collapse\"\n   :font-size \"12px\"\n   :font-family \"IBM Plex Sans Condensed\"\n   :letter-spacing \"-0.01em\"\n   :margin \"8px 0 0\"\n   :min-width \"100%\"\n   ::stylefy/manual [[:td {:border-top (str \"1px solid \" (:panel-color COLORS))\n                           :padding \"2px\"}]\n                     [:tbody {:vertical-align \"top\"}]\n                     [:th {:text-align \"left\" :padding \"2px 2px\"}]\n                     [:tr {:transition \"all 0.05s ease\"}]\n                     [:td:first-child :th:first-child {:padding-left \"8px\"}]\n                     [:td:last-child :th-last-child {:padding-right \"8px\"}]\n                     [:tbody [:tr:hover {:background (opacify (:panel-color HSL-COLORS) 0.15)\n                                         :color (:header-text-color COLORS)}]]\n                     [:td>ul {:padding \"0\"\n                              :margin \"0\"\n                              :list-style \"none\"}]\n                     [:td [:li {:margin \"0 0 4px\"\n                                :padding-top \"4px\";\n                                :border-top (str \"1px solid \" (:panel-color COLORS))}]]\n                     [:td [:li:first-child {:border-top \"none\" :margin-top \"0\" :padding-top \"0\"}]]\n                     [:a {:color (:link-color COLORS)}]\n                     [:a:hover {:text-decoration \"underline\"}]]})\n\n\n(def footer-style\n  {:margin \"8px 0\"\n   ::stylefy/manual [[:a {:color (:link-color COLORS)}]]})\n\n\n(defn table-view\n  [data mode limit]\n  (let [hs (headings data mode)\n        rows (get-rows data mode)]\n    [:div {:style {:overflow-x \"auto\"}}\n     [:table (use-style table-style)\n      [:thead\n       [:tr (for [h hs]\n              ^{:key (str \"heading-\" h)}\n              [:th (str h)])]]\n      [:tbody\n       (for [row (if (= mode :map)\n                   rows\n                   (take limit rows))]\n         ^{:key (str \"row-\" (-> row first :idx))}\n         [:tr (for [{:keys [idx heading] :as c} row]\n                ^{:key (str idx heading)}\n                [:td {:style {:background-color \"none\"}}\n                 (cell c)])])]]]))\n\n\n(defn coll-of-maps?\n  [x]\n  (and (coll? x)\n       (every? map? x)))\n\n\n(defn tuples?\n  [x]\n  (and (coll? x)\n       (every? coll? x)))\n\n\n(defn browser-component\n  [result limit]\n  [:div\n   [:div (cond\n\n           (coll-of-maps? result)\n           (table-view result :maps limit)\n\n           (map? result)\n           (table-view result :map limit)\n\n           (tuples? result)\n           (table-view result :tuples limit)\n\n           (coll? result)\n           (table-view result :coll limit)\n\n           :else\n           (str result))]\n   [:div (use-style footer-style) (when (and (coll? result)\n                                             (not (map? result))\n                                             (< limit (count result)))\n                                    [:span (str \"Showing \" limit \" out of \" (count result) \" rows \")\n                                     [:a {:on-click increase-limit!\n                                          :style {:cursor :pointer}}\n                                      \"load more\"]])]])\n\n\n(defn error-component\n  [error]\n  [:div {:style {:color \"red\"}}\n   (str error)])\n\n\n(defn handle-box-change!\n  [e]\n  (update-box! (-> e .-target .-value)))\n\n\n(defn handle-return-key!\n  [e]\n  (.preventDefault e)\n  (eval-box!))\n\n\n(defn insert-tab\n  [s pos]\n  (str (subs s 0 pos) \"  \" (subs s pos)))\n\n\n(defn handle-tab-key!\n  [e]\n  (let [t (.-target e)\n        v (.-value t)\n        pos (.-selectionStart t)]\n    (.preventDefault e)\n    (update-box! (insert-tab v pos))\n    (set! (.-selectionEnd t) (+ 2 pos))))\n\n\n(defn handle-box-key-down!\n  [e]\n  (let [key-code (.-keyCode e)\n        shift? (.-shiftKey e)\n        k (key-code->key key-code)]\n    (case k\n      :return (when shift?\n                (handle-return-key! e))\n      :tab (handle-tab-key! e)\n      nil)))\n\n\n(defn box-component\n  [box-state _]\n  (let [{:keys [str-content result error limit]} @box-state]\n    [:div\n     [:textarea {:value str-content\n                 :on-change handle-box-change!\n                 :on-key-down handle-box-key-down!\n                 :style {:width \"100%\"\n                         :min-height \"150px\"\n                         :resize :none\n                         :font-size \"12px\"\n                         :font-family \"IBM Plex Mono\"}}]\n     (if-not error\n       (browser-component result limit)\n       (error-component result))]))\n\n\n(defcard-rg Reset-to-all-pages\n  (fn []\n    [:button {:on-click #(do (reset! box-state* initial-box)\n                             (eval-box!))}\n     \"Reset\"]))\n\n\n(defcard-rg Browse-db-box\n  box-component\n  box-state*\n  {:history true})\n"]}