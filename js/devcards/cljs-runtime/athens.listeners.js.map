{"version":3,"sources":["athens/listeners.cljs"],"mappings":"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","names":["athens.listeners/mouse-down-bullet","e","class-list","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","p1__60552#","cljs.core/some","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","start-pos","uid","on-move","athens.listeners/mouse-move-bullet","goog.events/listen","js/window","goog.events.EventType/MOUSEMOVE","athens.listeners/mouse-up-bullet","_","map__60553","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","kind","target-uid","G__60554","re-frame.core/subscribe","G__60556","re-frame.core/dispatch","G__60557","goog.events/unlisten","cX","cY","x","y","closest-child","js/document.elementFromPoint","closest-sibling","closest-child-uid","closest-sibling-uid","closest-uid","or__4185__auto__","closest-kind","G__60558","map__60559","G__60560","G__60562","G__60563","G__60564","athens.listeners/mouse-down-block","closest-block","closest-block-header","closest-page-header","closest","G__60565","athens.listeners/mouse-over-bullet","tooltip-uid","G__60567","p1__60566#","G__60568","G__60569","athens.listeners/mouse-down-outside-athena","athena?","G__60570","and__4174__auto__","G__60571","athens.listeners/key-down","key","_ctrl","meta","shift","goog.events.KeyCodes/Z","G__60572","G__60573","goog.events.KeyCodes/K","G__60574","athens.listeners/init","goog.events.EventType/MOUSEDOWN","goog.events.EventType/MOUSEOVER","goog.events.EventType/KEYDOWN"],"sourcesContent":["(ns athens.listeners\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.events :as events]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      EventType\n      KeyCodes)))\n\n\n;;; Drag Bullet to Re-order Block\n\n\n(declare mouse-move-bullet mouse-up-bullet)\n\n\n(defn mouse-down-bullet\n  [e]\n  (let [class-list (-> (.. e -target -classList) array-seq)]\n    (when (some #(= \"bullet\" %) class-list)\n      (let [start-pos {:x (.-clientX e)\n                       :y (.-clientY e)}\n            uid (.. e -target -dataset -uid)\n            on-move (mouse-move-bullet start-pos uid)]\n        (events/listen js/window EventType.MOUSEMOVE on-move)\n        (set! (.. e -target -onmouseup) (mouse-up-bullet on-move))))))\n\n\n(defn mouse-up-bullet\n  [on-move]\n  (fn [_]\n    (let [{:keys [uid closest/kind] target-uid :closest/uid} @(subscribe [:drag-bullet])]\n      (when target-uid\n        (dispatch [:drop-bullet {:source uid :target target-uid :kind kind}]))\n      (dispatch [:drag-bullet nil])\n      ;; FIXME: after the first time `empty` is called, selection stays empty\n      ;;(.. (js/document.getSelection) empty)\n      (events/unlisten js/window EventType.MOUSEMOVE on-move))))\n\n\n(defn mouse-move-bullet\n  \"Must set hidden to true for bullet, otherwise bullet is captured when calling `elementFromPoint`.\n  Closest child always takes precedent over closest sibling, because .block-contents is nested within .block-container.\n  `cljs-oops` provides macros that let you bypass null `when` checks\"\n  [start-pos uid]\n  (fn [e]\n    (let [cX (.-clientX e)\n          cY (.-clientY e)\n          x (- cX (:x start-pos))\n          y (- cY (:y start-pos))]\n      (set! (.. e -target -hidden) true)\n      (let [closest-child   (.. (js/document.elementFromPoint cX cY) (closest \".block-contents\"))\n            closest-sibling (.. (js/document.elementFromPoint cX cY) (closest \".block-container\"))\n            closest-child-uid (when closest-child (.. closest-child -dataset -uid))\n            closest-sibling-uid (when closest-sibling (.. closest-sibling -dataset -uid))\n            closest-uid (or closest-child-uid closest-sibling-uid)\n            closest-kind (cond closest-child-uid   :child\n                               closest-sibling-uid :sibling)]\n        (set! (.. e -target -hidden) false)\n        (dispatch [:drag-bullet\n                   {:x            x\n                    :y            y\n                    :uid          uid\n                    :closest/uid  closest-uid\n                    :closest/kind closest-kind}])))))\n\n\n(defn mouse-up-bullet\n  [on-move]\n  (fn [_]\n    (let [{:keys [uid closest/kind] target-uid :closest/uid} @(subscribe [:drag-bullet])]\n      (when target-uid\n        (dispatch [:drop-bullet {:source uid :target target-uid :kind kind}]))\n      (dispatch [:drag-bullet nil])\n      ;; FIXME: after the first time `empty` is called, selection stays empty\n      ;;(.. (js/document.getSelection) empty)\n      (events/unlisten js/window EventType.MOUSEMOVE on-move))))\n\n\n(defn mouse-move-bullet\n  \"Must set hidden to true for bullet, otherwise bullet is captured when calling `elementFromPoint`.\n  Closest child always takes precedent over closest sibling, because .block-contents is nested within .block-container.\n  `cljs-oops` provides macros that let you bypass null `when` checks\"\n  [start-pos uid]\n  (fn [e]\n    (let [cX (.-clientX e)\n          cY (.-clientY e)\n          x (- cX (:x start-pos))\n          y (- cY (:y start-pos))]\n      (set! (.. e -target -hidden) true)\n      (let [closest-child   (.. (js/document.elementFromPoint cX cY) (closest \".block-contents\"))\n            closest-sibling (.. (js/document.elementFromPoint cX cY) (closest \".block-container\"))\n            closest-child-uid (when closest-child (.. closest-child -dataset -uid))\n            closest-sibling-uid (when closest-sibling (.. closest-sibling -dataset -uid))\n            closest-uid (or closest-child-uid closest-sibling-uid)\n            closest-kind (cond closest-child-uid   :child\n                               closest-sibling-uid :sibling)]\n        (set! (.. e -target -hidden) false)\n        (dispatch [:drag-bullet\n                   {:x            x\n                    :y            y\n                    :uid          uid\n                    :closest/uid  closest-uid\n                    :closest/kind closest-kind}])))))\n\n\n;;; Turn read block or header into editable on mouse down\n\n\n(defn mouse-down-block\n  [e]\n  ;; Consider refactor if we add more editable targets\n  (let [closest-block (.. e -target (closest \".block-contents\"))\n        closest-block-header (.. e -target (closest \".block-header\"))\n        closest-page-header (.. e -target (closest \".page-header\"))\n        closest (or closest-block closest-block-header closest-page-header)]\n    (when closest\n      (dispatch [:editing-uid (.. closest -dataset -uid)]))))\n\n\n;;; Show tooltip\n\n\n(defn mouse-over-bullet\n  [e]\n  (let [class-list (array-seq (.. e -target -classList))\n        closest (.. e -target (closest \".tooltip\"))\n        uid (.. e -target -dataset -uid)\n        tooltip-uid @(subscribe [:tooltip-uid])]\n    (cond\n      ;; if mouse over bullet, show tooltip\n      (some #(= \"bullet\" %) class-list) (dispatch [:tooltip-uid uid])\n      ;; if mouse over a child of bullet, keep tooltip-uid\n      closest nil\n      ;; if tooltip is already nil, don't overwrite tooltip-uid\n      (nil? tooltip-uid) nil\n      ;; otherwise mouse is no longer over a bullet or tooltip. clear the tooltip-uid\n      :else (dispatch [:tooltip-uid nil]))))\n\n\n;;; Close Athena\n\n\n(defn mouse-down-outside-athena\n  [e]\n  (let [athena? @(subscribe [:athena])\n        closest (.. e -target (closest \".athena\"))]\n    (when (and athena? (nil? closest))\n      (dispatch [:toggle-athena]))))\n\n\n;;; Hotkeys\n\n(defn key-down\n  [e]\n  (let [key (.. e -keyCode)\n        _ctrl (.. e -ctrlKey)\n        meta (.. e -metaKey)\n        shift (.. e -shiftKey)]\n\n    (cond\n      (and (= key KeyCodes.Z) meta shift)\n      (dispatch [:redo])\n\n      (and (= key KeyCodes.Z) meta)\n      (dispatch [:undo])\n\n      (and (= key KeyCodes.K) meta)\n      (dispatch [:toggle-athena]))))\n\n\n(defn init\n  []\n  (events/listen js/window EventType.MOUSEDOWN mouse-down-block)\n  (events/listen js/window EventType.MOUSEDOWN mouse-down-bullet)\n  (events/listen js/window EventType.MOUSEOVER mouse-over-bullet)\n  (events/listen js/window EventType.MOUSEDOWN mouse-down-outside-athena)\n  (events/listen js/window EventType.KEYDOWN key-down))\n"]}