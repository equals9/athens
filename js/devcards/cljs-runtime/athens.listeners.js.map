{"version":3,"sources":["athens/listeners.cljs"],"mappings":"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","names":["athens.listeners/multi-block-selection","e","cljs.core/deref","selected-items","G__62111","re-frame.core/subscribe","cljs.core/not-empty","shift","key-code","direction","athens.keybindings/arrow-key-direction","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/ENTER","G__62112","re-frame.core/dispatch","cljs.core/first","G__62113","goog.events.KeyCodes/BACKSPACE","G__62114","and__4174__auto__","G__62115","G__62116","G__62117","G__62118","G__62119","G__62120","cljs.core/last","athens.listeners/unfocus","G__62121","editing-uid","G__62122","closest-block","closest-block-header","closest-page-header","closest","or__4185__auto__","G__62123","G__62124","athens.listeners/mouse-down-outside-athena","athena?","G__62125","G__62126","athens.listeners/key-down","key","ctrl","meta","goog.events.KeyCodes/Z","G__62127","G__62128","goog.events.KeyCodes/K","G__62129","goog.events.KeyCodes/G","G__62130","goog.events.KeyCodes/R","G__62131","goog.events.KeyCodes/L","G__62132","athens.listeners/init","goog.events/listen","js/window","goog.events.EventType/MOUSEDOWN","goog.events.EventType/KEYDOWN"],"sourcesContent":["(ns athens.listeners\n  (:require\n    ;;[athens.util :refer [get-day]]\n    [athens.keybindings :refer [arrow-key-direction]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.events :as events]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      EventType\n      KeyCodes)))\n\n\n;; -- shift-up/down when multi-block selection ---------------------------\n\n;; can no longer use on-key-down from keybindings.cljs. textarea is no longer focused, so events must be handled globally\n(defn multi-block-selection\n  [e]\n  (let [selected-items @(subscribe [:selected/items])]\n    (when (not-empty selected-items)\n      (let [shift     (.. e -shiftKey)\n            key-code (.. e -keyCode)\n            direction (arrow-key-direction e)]\n        ;; what should tab/shift-tab do? roam and workflowy have slightly different behavior\n        (cond\n          (= key-code KeyCodes.ENTER) (do\n                                        (dispatch [:editing/uid (first selected-items)])\n                                        (dispatch [:selected/clear-items]))\n          (= key-code KeyCodes.BACKSPACE) (dispatch [:selected/delete selected-items])\n          (and shift (= direction :up)) (dispatch [:selected/up selected-items])\n          (and shift (= direction :down)) (dispatch [:selected/down selected-items])\n          (= direction :up) (do\n                              (.preventDefault e)\n                              (dispatch [:selected/clear-items])\n                              (dispatch [:up (first selected-items)]))\n          (= direction :down) (do\n                                (.preventDefault e)\n                                (dispatch [:selected/clear-items])\n                                (dispatch [:down (last selected-items)])))))))\n\n\n;; -- When user clicks elsewhere -----------------------------------------\n\n(defn unfocus\n  [e]\n  (let [selected-items @(subscribe [:selected/items])\n        editing-uid    @(subscribe [:editing/uid])\n        closest-block (.. e -target (closest \".block-content\"))\n        closest-block-header (.. e -target (closest \".block-header\"))\n        closest-page-header (.. e -target (closest \".page-header\"))\n        closest (or closest-block closest-block-header closest-page-header)]\n    (when (not-empty selected-items)\n      (dispatch [:selected/clear-items]))\n    (when (and (nil? closest) editing-uid)\n      (dispatch [:editing/uid nil]))))\n\n\n;; -- Turn read block or header into editable on mouse down --------------\n\n;; (defn edit-block\n;;   [e]\n;;   ;; Consider refactor if we add more editable targets\n;;   (let [closest-block (.. e -target (closest \".block-content\"))\n;;         closest-block-header (.. e -target (closest \".block-header\"))\n;;         closest-page-header (.. e -target (closest \".page-header\"))\n;;         closest (or closest-block closest-block-header closest-page-header)]\n;;     (when closest\n;;       (dispatch [:editing/uid (.. closest -dataset -uid)]))))\n\n\n;; -- Close Athena -------------------------------------------------------\n\n(defn mouse-down-outside-athena\n  [e]\n  (let [athena? @(subscribe [:athena/open])\n        closest (.. e -target (closest \".athena\"))]\n    (when (and athena? (nil? closest))\n      (dispatch [:athena/toggle]))))\n\n\n;; -- Hotkeys ------------------------------------------------------------\n\n\n(defn key-down\n  [e]\n  (let [key (.. e -keyCode)\n        ctrl (.. e -ctrlKey)\n        meta (.. e -metaKey)\n        shift (.. e -shiftKey)]\n\n    (cond\n      (and (= key KeyCodes.Z) meta shift)\n      (dispatch [:redo])\n\n      (and (= key KeyCodes.Z) meta)\n      (dispatch [:undo])\n\n      (and (= key KeyCodes.K) meta)\n      (dispatch [:athena/toggle])\n\n      (and (= key KeyCodes.G) ctrl)\n      (dispatch [:devtool/toggle])\n\n      (and (= key KeyCodes.R) ctrl)\n      (dispatch [:right-sidebar/toggle])\n\n      (and (= key KeyCodes.L) ctrl)\n      (dispatch [:left-sidebar/toggle]))))\n\n\n(defn init\n  []\n  ;; (events/listen js/window EventType.MOUSEDOWN edit-block)\n  (events/listen js/window EventType.MOUSEDOWN unfocus)\n  (events/listen js/window EventType.MOUSEDOWN mouse-down-outside-athena)\n  (events/listen js/window EventType.KEYDOWN multi-block-selection)\n  (events/listen js/window EventType.KEYDOWN key-down))\n\n"]}