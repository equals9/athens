{"version":3,"sources":["athens/devcards/filters.cljs"],"mappings":"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","names":["athens.devcards.filters/container-style","athens.devcards.filters/search-style","athens.devcards.filters/controls-style","athens.devcards.filters/filter-list-style","athens.devcards.filters/filter-style","athens.devcards.filters/added-style","athens.devcards.filters/excluded-style","athens.devcards.filters/count-style","athens.devcards.filters/filter-name-style","athens.devcards.filters/items","athens.devcards.filters/filters-el","_uid","items","s","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","sort_","cljs.core/deref","filtered-items","cljs.core/reduce-kv","m","k","v","cljs.core/re-find","cljs.core/re-pattern","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","num-filters","cljs.core/count","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__60082","vec__60083","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_k","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","athens.devcards.buttons/button-primary","js/module$node_modules$$material_ui$icons$index.Sort","_","cljs.core/assoc","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__60087","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__60089","cljs.core/chunk-buffer","i__60088","vec__60090","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","map__60093","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60086","cljs.core/chunk-rest","vec__60096","cljs.core/first","map__60099","cljs.core/cons","cljs.core/rest","count","state","added?","excluded?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__60095","js/Error","G__60101","js/module$node_modules$$material_ui$icons$index.Check","js/module$node_modules$$material_ui$icons$index.Block","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.filters","js/athens.devcards.filters.t_athens$devcards$filters60102","athens.devcards.filters/t_athens$devcards$filters60102","_60104","meta60103","this__38815__auto__","devcard-opts__38816__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__38834__auto__","cljs.core/fn?","data-atom__38835__auto__","owner__38836__auto__","reagent.core/as-element","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.filters/->t_athens$devcards$filters60102","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.filters\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.devcards.buttons :refer [button-primary]]\n    #_[athens.style :refer [color OPACITIES]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [devcards.core :refer [defcard-rg]]\n    #_[re-frame.core :as re-frame :refer [dispatch]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style #_use-sub-style]]))\n\n\n;;; Styles\n\n\n(def container-style\n  {:width \"400px\"\n   :display \"flex\"\n   :flex-direction \"column\"})\n\n\n(def search-style\n  {:width \"100%\"\n   :display \"flex\"})\n\n\n(def controls-style\n  {:width \"100%\"\n   :display \"flex\"\n   :justify-content \"space-between\"})\n\n\n(def filter-list-style\n  {:width \"100%\"\n   :display \"flex\"\n   :flex-direction \"column\"})\n\n\n(def filter-style\n  {:width           \"100%\"\n   :display         \"flex\"\n   :justify-content \"space-between\"\n   :height \"30px\"})\n\n\n(def added-style\n  {:background-color \"lightblue\"})\n\n\n(def excluded-style\n  {:background-color \"salmon\"})\n\n\n(def count-style\n  {:padding \"5px\"\n   :width \"30px\"})\n\n\n(def filter-name-style\n  {:padding-left \"10px\"})\n\n\n;;; Utilities\n\n\n(def items\n  {\"Amet\"   {:count 6 :state :added}\n   \"At\"     {:count 30 :state :excluded}\n   \"Diam\"   {:count 6}\n   \"Donec\"  {:count 6}\n   \"Elit\"   {:count 30}\n   \"Elitu\"  {:count 1}\n   \"Erat\"   {:count 11}\n   \"Est\"    {:count 2}\n   \"Eu\"     {:count 2}\n   \"Ipsum\"  {:count 2 :state :excluded}\n   \"Magnis\" {:count 10 :state :added}\n   \"Metus\"  {:count 29}\n   \"Mi\"     {:count 7 :state :added}\n   \"Quam\"   {:count 1}\n   \"Turpis\" {:count 97}\n   \"Vitae\"  {:count 1}})\n\n\n;;; Components\n\n\n(defn filters-el\n  [_uid items]\n  (let [s (r/atom {:sort :lex\n                   :items items\n                   :search \"\"})]\n    (fn [_uid items]\n      (let [sort_ (:sort @s)\n            filtered-items (reduce-kv\n                             (fn [m k v]\n                               (if (re-find\n                                     (re-pattern (str \"(?i)\" (:search @s)))\n                                     k)\n                                 (assoc m k v)\n                                 m))\n                             {}\n                             (:items @s))\n            items (if (= sort_ :lex)\n                    (into (sorted-map) filtered-items)\n                    (into (sorted-map-by (fn [k1 k2]\n                                           (compare\n                                             [(get-in items [k2 :count]) k1]\n                                             [(get-in items [k1 :count]) k2]))) filtered-items))\n            num-filters (count (filter\n                                 (fn [[_k v]] (:state v))\n                                 items))]\n\n        [:div (use-style container-style)\n         [:h5 \"Filter\"]\n\n         ;; Search\n         [:input (use-style search-style\n                            {:type        \"search\"\n                             :auto-focus  true\n                             :placeholder \"Add or remove filters\"\n                             :value (:search @s)\n                             :on-change   (fn [e]\n                                            (swap! s assoc-in [:search] (.. e -target -value)))})]\n\n         ;; Controls\n         [:div (use-style controls-style)\n          [button-primary {:label       [:> mui-icons/Sort]\n                           :on-click-fn (fn [_]\n                                          (swap! s assoc :sort (if (= sort_ :lex)\n                                                                 :count\n                                                                 :lex)))}]\n          [:div\n           [:span (str num-filters \" Filters Active\")]\n           [button-primary {:label       \"Reset\"\n                            :on-click-fn (fn [_]\n                                           (swap! s assoc :items\n                                                  (reduce-kv\n                                                    (fn [m k v]\n                                                      (assoc m k (dissoc v :state)))\n                                                    {}\n                                                    (:items @s))))}]]]\n\n\n         ;; List\n         [:div (use-style filter-list-style)\n          (doall\n            (for [[k {:keys [count state]}] items\n                  :let [added?    (= state :added)\n                        excluded? (= state :excluded)]]\n              ^{:key k}\n              [:div (use-style (merge filter-style\n                                      (cond\n                                        added? added-style\n                                        excluded? excluded-style))\n                               {:on-click (fn [_]\n                                            (swap! s assoc-in [:items k :state]\n                                                   (case state\n                                                     nil :added\n                                                     :added :excluded\n                                                     :excluded nil)))})\n\n               ;; Left\n               [:div\n                [:span (use-style count-style) count]\n                [:span (use-style filter-name-style) k]]\n\n               ;; Right\n               (when (or added? excluded?)\n                 [:span {:style {:display \"flex\"}} state\n                  (if added?\n                    [:> mui-icons/Check]\n                    [:> mui-icons/Block])])]))]]))))\n\n\n;;; Devcards\n\n\n(defcard-rg Filters\n  [filters-el \"((some-uid))\" items])\n"]}