{"version":3,"sources":["athens/devcards/blocks.cljs"],"mappings":"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","names":["athens.devcards.blocks/block-style","athens.devcards.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.devcards.blocks/block-indicator-style","G__57923","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__57924","garden.selectors/before","G__57925","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.blocks/drop-area-indicator","athens.devcards.blocks/block-content-style","athens.devcards.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/slash-commands-style","athens.devcards.blocks/slash-commands-list","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Description","js/module$node_modules$$material_ui$icons$index.Link","js/module$node_modules$$material_ui$icons$index.Timer","js/module$node_modules$$material_ui$icons$index.DateRange","js/module$node_modules$$material_ui$icons$index.Attachment","js/module$node_modules$$material_ui$icons$index.ExposurePlus1","js/module$node_modules$$material_ui$icons$index.Today","athens.devcards.blocks/block-component","ident","block","posh.reagent/pull","athens.db/dsdb","athens.db/block-pull-pattern","cljs.core/deref","athens.db/sort-block","athens.devcards.blocks/block-el","slash","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__57926","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__57927","uid","string","open","order","children","dbid","open?","and__4174__auto__","cljs.core/seq","closed?","cljs.core/not","editing-uid","G__57929","re-frame.core/subscribe","tooltip-uid","G__57930","x","y","dragging-uid","closest-uid","closest-kind","G__57931","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/dragging-style","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__57933","G__57934","athens.devcards.blocks/toggle","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.router/navigate-uid","komponentit.autosize/textarea","e","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.blocks/on-key-down","athens.parse-renderer/parse-and-render","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__57936","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__57938","cljs.core/chunk-buffer","i__57937","map__57939","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57935","cljs.core/chunk-rest","map__57941","cljs.core/first","cljs.core/cons","cljs.core/rest","icon","text","kbd","s__57944","b__57946","i__57945","iter__57943","child","id","G__57947","re-frame.core/dispatch","key","shift","val","sel-start","goog.events.KeyCodes/TAB","G__57948","G__57949","goog.events.KeyCodes/ENTER","G__57950","goog.events.KeyCodes/BACKSPACE","G__57951","goog.events.KeyCodes/SLASH","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.blocks","js/athens.devcards.blocks.t_athens$devcards$blocks57952","athens.devcards.blocks/t_athens$devcards$blocks57952","_57954","meta57953","this__38815__auto__","devcard-opts__38816__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__38834__auto__","cljs.core/fn?","data-atom__38835__auto__","owner__38836__auto__","reagent.core/as-element","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.blocks/->t_athens$devcards$blocks57952","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [join]]\n    [devcards.core :refer-macros [defcard-rg]]\n    [garden.selectors :as selectors]\n    [komponentit.autosize :as autosize]\n    [posh.reagent :refer [pull]]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"32px\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"})\n\n\n(def block-disclosure-toggle-style\n  {:width \"16px\"\n   :height \"32px\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def block-indicator-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"12px\"\n   :margin-right \"4px\"\n   :transition \"all 0.05s ease\"\n   :height \"32px\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"5px\"\n                            :width \"5px\"}]\n                   [:hover {:color (color :link-color)}]]\n                  ;;  [:before {:content \"''\"\n                  ;;            :position \"absolute\"\n                  ;;            :top \"24px\"\n                  ;;            :bottom \"0\"\n                  ;;            :pointer-events \"none\"\n                  ;;            :left \"22px\"\n                  ;;            :width \"1px\"\n                  ;;            :background (color :panel-color)}]\n\n   ::stylefy/manual [[:&.open {}]\n                     [:&.closed {}]\n                     [:&.closed [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                  :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]\n                     [:&.selected {}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   :animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                :animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index \"1\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ;;:min-height \"100px\" helpful for development\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.isEditing {:outline \"none\"\n                                   :z-index \"10\"\n                                   :display \"block\"\n                                   :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    2\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style)\n  ;;{:background-color \"lightblue\"})\n\n\n(def slash-commands-style\n  {:z-index 15\n   :background-color \"lightblue\"\n   :position \"absolute\"\n   :border \"1px solid black\"})\n\n\n;;; Helpers\n\n\n(def slash-commands-list\n  [{:icon [:> mui-icons/Done] :text \"TODO\" :kbd \"cmd-enter\"}\n   {:icon [:> mui-icons/Description] :text \"Page Reference\" :kbd \"[[\"}\n   {:icon [:> mui-icons/Link] :text \"Block Reference\" :kbd \"((\"}\n   {:icon [:> mui-icons/Timer] :text \"Current Time\"}\n   {:icon [:> mui-icons/DateRange] :text \"Date Picker\"}\n   {:icon [:> mui-icons/Attachment] :text \"Upload Image or File\"}\n   {:icon [:> mui-icons/ExposurePlus1] :text \"Word Count\"}\n   {:icon [:> mui-icons/Today] :text \"Today\"}])\n\n\n;;; Components\n\n\n\n(declare block-component block-el toggle on-key-down)\n\n\n(defn block-component\n  \"This query is long because I'm not sure how to recursively find all child blocks with all attributes\n  '[* {:block/children [*]}] doesn't work\nAlso, why does datascript return a reaction of {:db/id nil} when pulling for [:block/uid uid]?\nno results for q returns nil\nno results for pull eid returns nil\n  \"\n  [ident]\n  (let [block (->> @(pull db/dsdb db/block-pull-pattern ident)\n                   (db/sort-block))]\n    [block-el block]))\n\n\n;; TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [slash (r/atom false)]\n    (fn [block]\n      (let [{:block/keys [uid string open order children] dbid :db/id} block\n            open?       (and (seq children) open)\n            closed?     (and (seq children) (not open))\n            editing-uid @(subscribe [:editing-uid])\n            tooltip-uid @(subscribe [:tooltip-uid])\n            {:keys        [x y]\n             dragging-uid :uid\n             closest-uid  :closest/uid\n             closest-kind :closest/kind} @(subscribe [:drag-bullet])]\n\n        [:div (use-style (merge block-style\n                           (when (= dragging-uid uid) dragging-style))\n                {:class    (join \" \" [\"block-container\" (when (= dragging-uid uid) \"dragging\")])\n                 :data-uid uid})\n         [:div {:style {:display \"flex\"}}\n\n          ;; Toggle\n          (if (seq children)\n            [:button (use-style block-disclosure-toggle-style\n                       {:class    (cond open? \"open\" closed? \"closed\")\n                        :on-click #(toggle [:block/uid uid] open)})\n             [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n            [:span (use-style block-disclosure-toggle-style)])\n\n          ;; Bullet\n          (if (= dragging-uid uid)\n            [:span (merge (use-style block-indicator-style\n                            {:class    (join \" \" [\"bullet\" \"dragging\" (if closed? \"closed\" \"open\")])\n                             :data-uid uid})\n                     {:style {:transform (str \"translate(\" x \"px, \" y \"px)\")}})]\n\n            [:span (use-style block-indicator-style\n                     {:class    (str \"bullet \" (if closed? \"closed\" \"open\"))\n                      :data-uid uid\n                      :on-click #(navigate-uid uid)})])\n\n          ;; Tooltip\n          (when (and (= tooltip-uid uid)\n                  (not dragging-uid))\n            [:div (use-style tooltip-style {:class \"tooltip\"})\n             [:div [:b \"db/id\"] [:span dbid]]\n             [:div [:b \"uid\"] [:span uid]]\n             [:div [:b \"order\"] [:span order]]])\n\n          ;; Actual Contents\n          [:div (use-style (merge block-content-style {:user-select (when dragging-uid \"none\")})\n                  {:class    \"block-contents\"\n                   :data-uid uid})\n           [autosize/textarea {:value       string\n                               :class       (when (= editing-uid uid) \"isEditing\")\n                               :auto-focus  true\n                               :on-change   (fn [e]\n                                              (prn \"CHANGE\" (.. e -target-value)))\n                               ;;(debounce (.. e -target-value)))\n                               :on-key-down (fn [e] (on-key-down e uid slash))}]\n           [parse-and-render string]\n\n           (when @slash\n             [:div (use-style slash-commands-style)\n              [:div\n               (doall\n                 (for [{:keys [icon text kbd]} slash-commands-list]\n                   ^{:key text}\n                   [:div\n                    [:span icon]\n                    [:span text]\n                    [:kbd kbd]]))]])\n\n           ;; Drop Indicator\n           (when (and (= closest-uid uid)\n                   (= closest-kind :child))\n             [:span (use-style drop-area-indicator)])]]\n\n         ;; Children\n         (when open?\n           (for [child children]\n             [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n              [block-el child]]))\n\n         (when (and (= closest-uid uid) (= closest-kind :sibling))\n           [:span (use-style drop-area-indicator)])]))))\n\n;; Helpers\n\n;;(defn on-change\n;;  [v]\n;;  (dispatch [:transact-event [[:db/add [:block/uid \"VQ-ybRmNh\"] :block/string v]]]))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact-event [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  [e uid slash]\n  (let [key       (.. e -keyCode)\n        shift     (.. e -shiftKey)\n        val       (.. e -target -value)\n        sel-start (.. e -target -selectionStart)]\n    ;;(prn s)\n    (cond\n      (and (= key KeyCodes.TAB) shift) (dispatch [:unindent uid])\n      (= key KeyCodes.TAB) (dispatch [:indent uid])\n      (= key KeyCodes.ENTER) (dispatch [:enter uid val sel-start])\n      (and (= key KeyCodes.BACKSPACE) (zero? sel-start)) (dispatch [:backspace uid])\n      (and (= key KeyCodes.SLASH)) (swap! slash not))))\n\n\n;;; Devcards\n\n\n(defcard-rg Block\n  \"Pull entity 2347, a block within Athens FAQ, and its children. Doesn't pull parents, unlike `block-page`\"\n  [block-component 2347])\n"]}