{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__54396__auto__","result__54397__auto__","debux.common.util/send-trace!","e","e54488","_","athens.db/rfdb","db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__54489","vec__54490","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","item","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__54493","vec__54494","uid","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__54497","vec__54498","cljs.core/deref","block","G__54501","G__54502","G__54503","posh.reagent/pull","athens.db/dsdb","cljs.core/assoc-in","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","e54504","error","e54505","e54506","p__54507","vec__54508","e54511","p__54512","vec__54513","p__54516","vec__54517","map","p__54520","vec__54521","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","e54525","athens.db/athens-url","p__54533","vec__54534","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__54537","map__54538","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","p__54540","vec__54541","temp__5735__auto__","prev","p1__54544#","athens.db/find-prev","athens.db/history","next","p1__54545#","athens.db/find-next","athens.events/get-block","id","G__54547","G__54548","G__54549","athens.events/get-parent","eid","G__54550","G__54551","datascript.core/entity","cljs.core/first","athens.events/rules","athens.events/gen-block-uid","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/random-uuid","p__54552","vec__54553","_uid","athens.events/split-block","val","sel-start","parent","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","new-uid","new-block","reindex","G__54560","G__54561","G__54562","G__54563","G__54564","datascript.core/q","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__54556","vec__54557","order","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/bump-up","G__54571","G__54572","G__54573","G__54574","G__54575","p__54567","vec__54568","p__54576","vec__54577","cljs.core/empty?","p__54581","vec__54582","older-sib","p1__54580#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","reindex-blocks","G__54592","G__54593","G__54594","G__54595","G__54596","p__54587","vec__54588","p__54597","vec__54598","grandpa","reindex-grandpa","G__54605","G__54606","G__54607","G__54608","G__54609","p__54601","vec__54602","and__4174__auto__","athens.events/target-child","source","source-parent","target","new-parent-children","G__54620","G__54621","G__54622","G__54623","G__54624","p__54616","vec__54617","new-target-children","G__54629","G__54630","G__54631","G__54632","G__54633","p__54625","vec__54626","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","t-order","s-order","inc-or-dec","cljs.core/inc","cljs.core/dec","G__54638","G__54639","G__54640","G__54641","G__54642","G__54643","G__54644","p__54634","vec__54635","athens.events/target-sibling-diff-parent","target-parent","source-parent-children","G__54649","G__54650","G__54651","G__54652","G__54653","p__54645","vec__54646","target-parent-children","G__54658","G__54659","G__54660","G__54661","G__54662","p__54654","vec__54655","p__54663","vec__54664","e54667","p__54668","vec__54669","source-uid","target-uid","kind","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (update db :athena not)))\n\n\n(reg-event-db\n  :toggle-devtool\n  (fn [db _]\n    (update db :devtool not)))\n\n\n(reg-event-db\n  :toggle-left-sidebar\n  (fn [db _]\n    (update db :left-sidebar not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n(reg-event-db\n  :right-sidebar/open-item\n  (fn [db [_ uid]]\n    (let [block @(pull db/dsdb '[:node/title :block/string] [:block/uid uid])]\n      (assoc-in db [:right-sidebar/items uid] (assoc block :open true)))))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:db         db/rfdb\n              :async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})))\n\n\n(reg-event-fx\n  :transact-event\n  (fn [_ [_ datoms]]\n    {:transact datoms}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn next})))\n\n\n;;; dsdb events (transactions)\n\n\n(defn get-block\n  [id]\n  @(pull db/dsdb '[:db/id :block/uid :block/order {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (let [eid (-> (d/entity @db/dsdb id)\n              :block/_children\n              first\n              :db/id)]\n    (get-block eid)))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(defn gen-block-uid\n  []\n  (subs (str (random-uuid)) 27))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ _uid]]))\n\n\n;; TODO but how to set focus... especially async\n(defn split-block\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        head (subs val 0 sel-start)\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (:block/order block))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string head]\n                {:db/id (:db/id parent)\n                 :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n(defn bump-up\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (inc (:block/order block)))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string \"\"]\n                {:db/id (:db/id parent) :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n;; TODO: if enter at end of block, if block open, insert new 0th child. otherwise, add sibling (default behavior right now)\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val sel-start]]\n    (cond\n      (not (zero? sel-start)) (split-block uid val sel-start)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? sel-start) val) (bump-up uid val sel-start))))\n\n\n;; TODO: no-op when indenting as the right-most child\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [block (get-block [:block/uid uid])\n          parent (get-parent [:block/uid uid])\n          older-sib (->> parent\n                      :block/children\n                      (filter #(= (dec (:block/order block)) (:block/order %)))\n                      first\n                      :db/id\n                      get-block)\n          new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n          reindex-blocks (->> (d/q '[:find ?ch ?new-o\n                                     :in $ % ?p ?at\n                                     :where (dec-after ?p ?at ?ch ?new-o)]\n                                @db/dsdb rules (:db/id parent) (:block/order block))\n                           (map (fn [[id order]] {:db/id id :block/order order})))]\n      {:transact [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                  {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                  {:db/id (:db/id parent) :block/children reindex-blocks}]}))) ;; reindex parent\n\n\n;; TODO: no-op when user tries to unindent to a child out of current context\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (get-parent [:block/uid uid])\n          grandpa (get-parent (:db/id parent))\n          new-block {:block/uid uid :block/order (inc (:block/order parent))}\n          reindex-grandpa (->> (d/q '[:find ?ch ?new-order\n                                      :in $ % ?grandpa ?parent-order\n                                      :where (inc-after ?grandpa ?parent-order ?ch ?new-order)]\n                                 @db/dsdb rules (:db/id grandpa) (:block/order parent))\n                            (map (fn [[id order]] {:db/id id :block/order order}))\n                            (concat [new-block]))]\n      (when (and parent grandpa)\n        {:transact [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                    {:db/id (:db/id grandpa) :block/children reindex-grandpa}]}))))\n\n\n(defn target-child\n  [source source-parent target]\n  (let [new-block {:block/uid (:block/uid source) :block/order 0}\n        new-parent-children (->> (d/q '[:find ?ch ?new-order\n                                         :in $ % ?parent ?source-order\n                                         :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                    @db/dsdb rules (:db/id source-parent) (:block/order source))\n                              (map (fn [[id order]] {:db/id id :block/order order})))\n        new-target-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ % ?parent ?at\n                                        :where (inc-after ?parent ?at ?ch ?new-order)]\n                                   @db/dsdb rules (:dbid target) 0)\n                              (map (fn [[id order]] {:db/id id :block/order order}))\n                              (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]] ;; retract source from parent\n     {:db/add (:db/id source-parent) :block/children new-parent-children} ;; reindex parent without source\n     {:db/id (:db/id target) :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        new-block {:db/id (:db/id source) :block/order (inc t-order)}\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                       @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?source-order\n                                           :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                 (map (fn [[id order]] {:db/id id :block/order order})))\n        target-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?target-order\n                                           :where (inc-after ?parent ?target-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id target-parent) (:block/order target))\n                                 (map (fn [[id order]] {:db/id id :block/order order}))\n                                 (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children} ;; reindex source\n     {:db/id (:db/id target-parent) :block/children target-parent-children}])) ;; reindex target\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (let [source        (get-block [:block/uid source-uid])\n                   target        (get-block [:block/uid target-uid])\n                   source-parent (get-parent [:block/uid source-uid])\n                   target-parent (get-parent [:block/uid target-uid])]\n               {:transact\n                (cond\n                  ;; child always has same behavior: move to first child of target\n                  (= kind :child) (target-child source source-parent target)\n                  ;; do nothing if target is directly above source\n                  (and (= source-parent target-parent)\n                    (= 1 (- (:block/order source) (:block/order target)))) nil\n                  ;; re-order blocks between source and target\n                  (= source-parent target-parent) (target-sibling-same-parent source target source-parent)\n                  ;;; when parent is different, re-index both source-parent and target-parent\n                  (not= source-parent target-parent) (target-sibling-diff-parent source target source-parent target-parent))})))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}