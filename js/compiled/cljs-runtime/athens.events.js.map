{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__54408__auto__","result__54409__auto__","debux.common.util/send-trace!","e","e54508","_","athens.db/rfdb","db","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","e54509","error","cljs.core/assoc-in","e54510","e54511","p__54512","vec__54513","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","e54516","p__54517","vec__54518","uid","p__54521","vec__54522","map","p__54525","vec__54526","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","e54529","athens.db/athens-url","p__54530","vec__54531","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__54534","map__54535","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","temp__5735__auto__","prev","cljs.core/deref","p1__54537#","athens.db/find-prev","athens.db/history","athens.db/dsdb","next","p1__54538#","athens.db/find-next","p__54539","vec__54540","athens.events/get-block","id","G__54543","G__54544","G__54545","posh.reagent/pull","athens.events/get-parent","eid","G__54546","G__54547","datascript.core/entity","cljs.core/first","p__54549","vec__54550","old-parent-eid","new-parent-uid","G__54553","G__54554","G__54555","datascript.core/q","cljs.core/vec","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__54548#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core/last","p__54556","vec__54557","parent","grandpa","reindex-blocks","G__54560","G__54561","G__54562","G__54563","cljs.core.map.cljs$core$IFn$_invoke$arity$2","x","athens.events/reindex","blocks","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","athens.events/reindex-parent","source","p1__54564#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.events/reindex-target","target","kind","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","conj-child","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","indexed-children","p__54565","vec__54566","map__54569","e54571","p__54572","vec__54573","map__54576","parent-children","target-children"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (assoc db :athena (not (:athena db)))))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:db         db/rfdb\n              :async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn next})))\n\n\n\n\n;;; dsdb events (transactions)\n\n(reg-event-fx\n  :transact-event\n  (fn [_ [_ datoms]]\n    {:transact datoms}))\n\n\n;; Block Editing\n\n(defn get-block\n  [id]\n  @(pull db/dsdb '[:db/id {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (let [eid (-> (d/entity @db/dsdb id)\n              :block/_children\n              first\n              :db/id)]\n    (get-block eid)))\n\n\n;; find sibling block with order - 1\n;; TODO: reindex order\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [old-parent-eid (:db/id (get-parent [:block/uid uid]))\n          new-parent-uid\n          (->> (d/q '[:find ?order ?uid\n                      :in $ ?parent\n                      :where\n                      [?parent :block/children ?children]\n                      [?children :block/order ?order]\n                      [?children :block/uid ?uid]]\n                 @db/dsdb old-parent-eid)\n            vec\n            (sort-by first)\n            (take-while #(not= uid (second %)))\n            last\n            second)]\n      {:transact [[:db/add [:block/uid new-parent-uid] :block/children [:block/uid uid]]\n                  [:db/retract old-parent-eid :block/children [:block/uid uid]]]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (get-parent [:block/uid uid])\n          grandpa (get-parent (:db/id parent))\n          reindex-blocks (->> (d/q '[:find ?new-order ?children\n                                     :in $ ?grandpa ?parent-order\n                                     :where\n                                     [?grandpa :block/children ?children]\n                                     [?children :block/order ?order]\n                                     [(> ?order ?parent-order)]\n                                     [(inc ?order) ?new-order]]\n                                @db/dsdb (:db/id grandpa) (:order parent))\n                           (map (fn [x] {:db/id (second x) :block/order (first x)})))]\n      {:transact [[:db/add [:block/uid uid] :block/order (inc (:block/order parent))]\n                  [:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                  [:db/add (:db/id grandpa) :block/children [:block/uid uid]]\n                  {:db/add (:db/id grandpa) :block/children reindex-blocks}]})))\n\n\n\n\n\n;; Drag and Drop\n\n(defn reindex\n  [blocks]\n  (->> blocks\n    (sort-by :block/order)\n    (map-indexed (fn [i x] (assoc x :block/order i)))\n    vec))\n\n\n(defn reindex-parent\n  [source parent]\n  (->> parent\n    :block/children\n    (remove #(= (:block/uid %) source))\n    reindex))\n\n\n(defn reindex-target\n  \"If kind is :sibling, target's parent is new target\n  If kind is :child, target is target\"\n  [source target kind]\n  (when (= kind :child)\n    (let [target (get-block [:block/uid target])\n          children (get target :block/children [])\n          conj-child (conj children {:block/uid source :block/order -1})\n          indexed-children (reindex conj-child)]\n      indexed-children)))\n\n;; TODO: wrangling nested data is a pain. probably looking into Specter\n;; (when (= kind :sibling))\n;;(get-parent [:block/uid target])\n;;(->> (reindex-target s t :sibling)\n;;  :block/children\n;;  (sort-by :block/order)\n;;  (take-while #(not= (:block/uid %) t)))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ {:keys [source target kind]}]]\n             (let [parent (get-parent [:block/uid source])\n                   parent-children (reindex-parent source parent)\n                   target-children (reindex-target source target kind)]\n               {:transact [\n                           {:db/add [:block/uid source] :block/children parent-children} ;; re-index source parent's children\n                           [:db/retract (:db/id parent) :block/children [:block/uid source]] ;; retract source from parent\n                           {:db/id [:block/uid target]  :block/children target-children}]}))) ;; reindex target location\n\n\n\n\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}