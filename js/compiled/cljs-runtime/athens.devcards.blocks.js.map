{"version":3,"sources":["athens/devcards/blocks.cljs"],"mappings":"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","names":["athens.devcards.blocks/block-style","athens.devcards.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.devcards.blocks/block-indicator-style","G__65743","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__65744","garden.selectors/before","G__65745","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.blocks/drop-area-indicator","athens.devcards.blocks/block-content-style","athens.devcards.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/fast-on-change","value","_uid","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.devcards.blocks/on-change","uid","G__65746","re-frame.core/dispatch","athens.devcards.blocks/db-on-change","goog.functions/debounce","athens.devcards.blocks/toggle","id","open","G__65747","cljs.core/not","athens.devcards.blocks/on-key-down","e","key","shift","val","sel-start","and__4174__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/TAB","G__65748","G__65749","goog.events.KeyCodes/ENTER","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__65750","goog.events.KeyCodes/SLASH","cljs.core/update","goog.events.KeyCodes/BACKSPACE","G__65751","athens.devcards.blocks/block-el","block","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__65752","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","map__65753","map__65754","string","order","children","dbid","open?","cljs.core/seq","closed?","editing-uid","G__65756","re-frame.core/subscribe","tooltip-uid","G__65757","x","y","dragging-uid","closest-uid","closest-kind","G__65758","atom-string","slash?","context-menu?","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","athens.devcards.dropdown/context-menu-component","komponentit.autosize/textarea","athens.parse-renderer/parse-and-render","iter__4582__auto__","s__65762","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__65764","cljs.core/chunk-buffer","i__65763","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__65761","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","child","athens.devcards.dropdown/slash-menu-component","athens.devcards.blocks/block-component","ident","posh.reagent/pull","athens.db/dsdb","athens.db/block-pull-pattern","athens.db/sort-block","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.devcards.dropdown :refer [slash-menu-component context-menu-component]]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [join]]\n    [devcards.core :refer-macros [defcard-rg]]\n    [garden.selectors :as selectors]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [posh.reagent :refer [pull]]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def block-indicator-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.open {}]\n                     [:&.closed {}]\n                     [:&.closed [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                  :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]\n                     [:&.selected {}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   :animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                :animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index \"1\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index \"10\"\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    2\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n;; Helpers\n\n(defn fast-on-change\n  [value _uid state]\n  (swap! state assoc :atom-string value))\n\n\n(defn on-change\n  [value uid state]\n  (dispatch [:transact-event [[:db/add [:block/uid uid] :block/string value]]])\n  (fast-on-change value uid state))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact-event [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  [e uid state]\n  (let [key       (.. e -keyCode)\n        shift     (.. e -shiftKey)\n        val       (.. e -target -value)\n        sel-start (.. e -target -selectionStart)]\n    (cond\n      (and shift (= key KeyCodes.TAB)) (dispatch [:unindent uid])\n      (= key KeyCodes.TAB) (dispatch [:indent uid])\n      (and shift (= key KeyCodes.ENTER)) (prn \"start new line in textarea\")\n      (= key KeyCodes.ENTER) (dispatch [:enter uid val sel-start])\n      (= key KeyCodes.SLASH) (swap! state update :slash? not)\n      (and (= key KeyCodes.BACKSPACE) (zero? sel-start)) (dispatch [:backspace uid]))))\n\n\n;;; Components\n\n\n;; TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :context-menu? false})]\n    (fn [block]\n      (let [{:block/keys [uid string open order children] dbid :db/id} block\n            open?       (and (seq children) open)\n            closed?     (and (seq children) (not open))\n            editing-uid @(subscribe [:editing-uid])\n            tooltip-uid @(subscribe [:tooltip-uid])\n            {:keys        [x y]\n             dragging-uid :uid\n             closest-uid  :closest/uid\n             closest-kind :closest/kind} @(subscribe [:drag-bullet])\n            {:keys [atom-string slash? context-menu?]} @state]\n\n        [:div (use-style block-style\n                         {:class    (join \" \" [\"block-container\" (when (= dragging-uid uid) \"dragging\")])\n                          :data-uid uid})\n         [:div {:style {:display \"flex\"}}\n\n          ;; Toggle\n          (if (seq children)\n            [:button (use-style block-disclosure-toggle-style\n                                {:class    (cond open? \"open\" closed? \"closed\")\n                                 :on-click #(toggle [:block/uid uid] open)})\n             [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n            [:span (use-style block-disclosure-toggle-style)])\n\n          ;; Bullet\n          (if (= dragging-uid uid)\n            [:span (merge (use-style block-indicator-style\n                                     {:class    (join \" \" [\"bullet\" \"dragging\" (if closed? \"closed\" \"open\")])\n                                      :data-uid uid})\n                          {:style {:transform (str \"translate(\" x \"px, \" y \"px)\")}})]\n\n            [:span (use-style block-indicator-style\n                              {:class    (str \"bullet \" (if closed? \"closed\" \"open\"))\n                               :data-uid uid\n                               :on-click #(navigate-uid uid)\n                               :on-context-menu (fn [e]\n                                                  (.. e preventDefault)\n                                                  (swap! state update :context-menu? not))})])\n\n          ;; Tooltip\n          (when (and (= tooltip-uid uid) (not dragging-uid))\n            [:div (use-style tooltip-style {:class \"tooltip\"})\n             [:div [:b \"db/id\"] [:span dbid]]\n             [:div [:b \"uid\"] [:span uid]]\n             [:div [:b \"order\"] [:span order]]])\n\n          ;; Context Menu\n          (when context-menu?\n            [context-menu-component])\n\n          ;; Actual Contents\n          [:div (use-style (merge block-content-style {:user-select (when dragging-uid \"none\")})\n                           {:class    \"block-contents\"\n                            :data-uid uid})\n           [autosize/textarea {:value       atom-string\n                               :class       (when (= editing-uid uid) \"is-editing\")\n                               :auto-focus  true\n                               :on-change   (fn [e]\n                                              (let [value (.. e -target -value)]\n                                                (fast-on-change value uid state)\n                                                (db-on-change value uid state)))\n                               :on-key-down (fn [e] (on-key-down e uid state))}]\n           [parse-and-render string]\n\n           ;; Drop Indicator\n           (when (and (= closest-uid uid) (= closest-kind :child))\n             [:span (use-style drop-area-indicator)])]]\n\n         ;; Children\n         (when open?\n           (for [child children]\n             [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n              [block-el child]]))\n\n         ;; Drop Indicator\n         (when (and (= closest-uid uid) (= closest-kind :sibling))\n           [:span (use-style drop-area-indicator)])\n\n         (when slash?\n           [slash-menu-component])]))))\n\n\n(defn block-component\n  \"This query is long because I'm not sure how to recursively find all child blocks with all attributes\n  '[* {:block/children [*]}] doesn't work\nAlso, why does datascript return a reaction of {:db/id nil} when pulling for [:block/uid uid]?\nno results for q returns nil\nno results for pull eid returns nil\n  \"\n  [ident]\n  (let [block (->> @(pull db/dsdb db/block-pull-pattern ident)\n                   (db/sort-block))]\n    [block-el block]))\n\n\n;;; Devcards\n\n\n(defcard-rg Block\n  \"Pull entity 2347, a block within Athens FAQ, and its children. Doesn't pull parents, unlike `block-page`\"\n  [block-component 2347])\n"]}